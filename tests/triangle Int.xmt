(set-option :backend none)
(declare-fun Edge (Int Int) Bool)
(declare-fun phi (Int Int Int) Bool)
(x-interpret-pred Edge
  (x-set
    (1 2)
    (2 3)
    (1 3)
  )
)
(assert (forall ((x Int) (y Int) (z Int))
            (=> (and (Edge x y) (Edge y z) (Edge x z))
                (phi x y z)
            )))
(x-ground)
(x-debug solver functions)
;(x-debug db-view Edge_UF)
(x-debug solver groundings)
(check-sat)
-------------------------
(declare-fun Edge (Int Int) Bool)
(declare-fun phi (Int Int Int) Bool)
(assert (phi 1 2 3))
Functions:
 - true: Constructor
 - false: Constructor
 - not: Predefined (true)
 - =>: Predefined (true)
 - and: Predefined (true)
 - or: Predefined (true)
 - xor: Predefined (true)
 - =: Predefined (true)
 - distinct: Predefined (true)
 - <=: Predefined (true)
 - <: Predefined (true)
 - >=: Predefined (true)
 - >: Predefined (true)
 - ite: Predefined (?)
 - let: Predefined (?)
 - +: Predefined (false)
 - -: Predefined (false)
 - *: Predefined (false)
 - div: Predefined (false)
 - mod: Predefined (false)
 - abs: Predefined (false)
 - Edge: Boolean (_xmt_edge_TU Complete, (infinite), (infinite))
 - phi: Int * Int * Int -> Bool (true)
Groundings:
 - x: SELECT "x" AS x,
       "x" AS G
 - y: SELECT "y" AS y,
       "y" AS G
 - (Edge x y):
    T: SELECT _xmt_edge_TU_2.a_1 AS x,
       _xmt_edge_TU_2.a_2 AS y,
       "true" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_2
    UF: SELECT "x" AS x,
       "y" AS y,
       apply("Edge", "x", "y") AS G
    G : SELECT "x" AS x,
       "y" AS y,
       apply("Edge", "x", "y") AS G
 - (not (Edge x y)):
    TU: SELECT "x" AS x,
       "y" AS y,
       apply("not", apply("Edge", "x", "y")) AS G
    F: SELECT _xmt_edge_TU_2.a_1 AS x,
       _xmt_edge_TU_2.a_2 AS y,
       "false" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_2
    G : SELECT "x" AS x,
       "y" AS y,
       apply("not", apply("Edge", "x", "y")) AS G
 - z: SELECT "z" AS z,
       "z" AS G
 - (Edge y z):
    T: SELECT _xmt_edge_TU_5.a_1 AS y,
       _xmt_edge_TU_5.a_2 AS z,
       "true" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_5
    UF: SELECT "y" AS y,
       "z" AS z,
       apply("Edge", "y", "z") AS G
    G : SELECT "y" AS y,
       "z" AS z,
       apply("Edge", "y", "z") AS G
 - (not (Edge y z)):
    TU: SELECT "y" AS y,
       "z" AS z,
       apply("not", apply("Edge", "y", "z")) AS G
    F: SELECT _xmt_edge_TU_5.a_1 AS y,
       _xmt_edge_TU_5.a_2 AS z,
       "false" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_5
    G : SELECT "y" AS y,
       "z" AS z,
       apply("not", apply("Edge", "y", "z")) AS G
 - (Edge x z):
    T: SELECT _xmt_edge_TU_7.a_1 AS x,
       _xmt_edge_TU_7.a_2 AS z,
       "true" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_7
    UF: SELECT "x" AS x,
       "z" AS z,
       apply("Edge", "x", "z") AS G
    G : SELECT "x" AS x,
       "z" AS z,
       apply("Edge", "x", "z") AS G
 - (not (Edge x z)):
    TU: SELECT "x" AS x,
       "z" AS z,
       apply("not", apply("Edge", "x", "z")) AS G
    F: SELECT _xmt_edge_TU_7.a_1 AS x,
       _xmt_edge_TU_7.a_2 AS z,
       "false" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_7
    G : SELECT "x" AS x,
       "z" AS z,
       apply("not", apply("Edge", "x", "z")) AS G
 - (phi x y z):
    TU: SELECT "x" AS x,
       "y" AS y,
       "z" AS z,
       apply("phi", "x", "y", "z") AS G
    UF: SELECT "x" AS x,
       "y" AS y,
       "z" AS z,
       apply("phi", "x", "y", "z") AS G
    G : SELECT "x" AS x,
       "y" AS y,
       "z" AS z,
       apply("phi", "x", "y", "z") AS G
 - (or (not (Edge x y)) (not (Edge y z)) (not (Edge x z)) (phi x y z)):
    TU: SELECT x, y, z,
       or_aggregate(G) as G
 FROM (SELECT "x" AS x,
              "y" AS y,
              "z" AS z,
              apply("not", apply("Edge", "x", "y")) AS G
       UNION
       SELECT "x" AS x,
              "y" AS y,
              "z" AS z,
              apply("not", apply("Edge", "y", "z")) AS G
       UNION
       SELECT "x" AS x,
              "y" AS y,
              "z" AS z,
              apply("not", apply("Edge", "x", "z")) AS G
       UNION
       SELECT "x" AS x,
              "y" AS y,
              "z" AS z,
              apply("phi", "x", "y", "z") AS G)
    UF: SELECT _xmt_edge_TU_2.a_1 AS x,
       _xmt_edge_TU_2.a_2 AS y,
       _xmt_edge_TU_5.a_2 AS z,
       apply("phi", _xmt_edge_TU_2.a_1, _xmt_edge_TU_2.a_2, _xmt_edge_TU_5.a_2) AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_2
  JOIN _xmt_edge_TU AS _xmt_edge_TU_5
        ON _xmt_edge_TU_2.a_2 = _xmt_edge_TU_5.a_1
  JOIN _xmt_edge_TU AS _xmt_edge_TU_7
        ON _xmt_edge_TU_2.a_1 = _xmt_edge_TU_7.a_1 AND _xmt_edge_TU_5.a_2 = _xmt_edge_TU_7.a_2
    G : SELECT "x" AS x,
       "y" AS y,
       "z" AS z,
       apply("or", apply("not", apply("Edge", "x", "y")), apply("not", apply("Edge", "y", "z")), apply("not", apply("Edge", "x", "z")), apply("phi", "x", "y", "z")) AS G
 - (forall ((x Int) (y Int) (z Int)) (or (not (Edge x y)) (not (Edge y z)) (not (Edge x z)) (phi x y z))):
    TU: SELECT "(forall ((x Int) (y Int) (z Int)) " || and_aggregate(G) || ")" as G
 FROM (SELECT "x" AS x,
              "y" AS y,
              "z" AS z,
              apply("or", apply("not", apply("Edge", "x", "y")), apply("not", apply("Edge", "y", "z")), apply("not", apply("Edge", "x", "z")), apply("phi", "x", "y", "z")) AS G)
    UF: SELECT G as G
 FROM (SELECT _xmt_edge_TU_2.a_1 AS x,
              _xmt_edge_TU_2.a_2 AS y,
              _xmt_edge_TU_5.a_2 AS z,
              apply("phi", _xmt_edge_TU_2.a_1, _xmt_edge_TU_2.a_2, _xmt_edge_TU_5.a_2) AS G
         FROM _xmt_edge_TU AS _xmt_edge_TU_2
         JOIN _xmt_edge_TU AS _xmt_edge_TU_5
               ON _xmt_edge_TU_2.a_2 = _xmt_edge_TU_5.a_1
         JOIN _xmt_edge_TU AS _xmt_edge_TU_7
               ON _xmt_edge_TU_2.a_1 = _xmt_edge_TU_7.a_1 AND _xmt_edge_TU_5.a_2 = _xmt_edge_TU_7.a_2)
    G : SELECT "(forall ((x Int) (y Int) (z Int)) " || and_aggregate(G) || ")" as G
 FROM (SELECT "x" AS x,
              "y" AS y,
              "z" AS z,
              apply("or", apply("not", apply("Edge", "x", "y")), apply("not", apply("Edge", "y", "z")), apply("not", apply("Edge", "x", "z")), apply("phi", "x", "y", "z")) AS G)
(check-sat)
