(set-option :backend none)
(declare-datatype Node ( ( |1| ) ( |2| ) ( |3| )))
(declare-fun Edge (Node Node) Bool)
(declare-fun phi (Node Node Node) Bool)
(x-interpret-pred Edge
  (x-set
    (|1| |2|)
    (|2| |3|)
    (|1| |3|)
  )
)
(assert (forall ((x Node) (y Node) (z Node))
            (=> (and (Edge x y) (Edge y z) (Edge x z))
                (phi x y z)
            )))
(assert (forall ((x Node)) (Edge x x)))
(assert (exists ((x Node) (y Node)) (Edge x y)))
(x-ground)
(x-debug db-view Agg_14_UF)
(x-debug solver groundings)
(check-sat)
-------------------------
(declare-datatype Node ((|1| ) (|2| ) (|3| )))
(declare-fun Edge (Node Node) Bool)
(declare-fun phi (Node Node Node) Bool)
(assert (phi |1| |2| |3|))
(assert false)
CREATE VIEW Agg_14_UF AS SELECT or_aggregate(G) as G from (SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_2.G AS G FROM _xmt_edge_G AS _xmt_edge_G_2)
Groundings:
 - x: SELECT _xmt_node.G AS x, _xmt_node.G AS G FROM _xmt_node
 - y: SELECT _xmt_node_1.G AS y, _xmt_node_1.G AS G FROM _xmt_node AS _xmt_node_1
 - (Edge x y):
    T: SELECT _xmt_edge_TU_2.a_0 AS x, _xmt_edge_TU_2.a_1 AS y, "true" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_2
    F: SELECT _xmt_edge_UF_2.a_0 AS x, _xmt_edge_UF_2.a_1 AS y, "false" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_2
    G : SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_2.G AS G FROM _xmt_edge_G AS _xmt_edge_G_2
 - (not (Edge x y)):
    T: SELECT _xmt_edge_UF_2.a_0 AS x, _xmt_edge_UF_2.a_1 AS y, "true" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_2
    F: SELECT _xmt_edge_TU_2.a_0 AS x, _xmt_edge_TU_2.a_1 AS y, "false" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_2
    G : SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, not_(_xmt_edge_G_2.G) AS G FROM _xmt_edge_G AS _xmt_edge_G_2
 - z: SELECT _xmt_node_4.G AS z, _xmt_node_4.G AS G FROM _xmt_node AS _xmt_node_4
 - (Edge y z):
    T: SELECT _xmt_edge_TU_5.a_0 AS y, _xmt_edge_TU_5.a_1 AS z, "true" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_5
    F: SELECT _xmt_edge_UF_5.a_0 AS y, _xmt_edge_UF_5.a_1 AS z, "false" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_5
    G : SELECT _xmt_edge_G_5.a_0 AS y, _xmt_edge_G_5.a_1 AS z, _xmt_edge_G_5.G AS G FROM _xmt_edge_G AS _xmt_edge_G_5
 - (not (Edge y z)):
    T: SELECT _xmt_edge_UF_5.a_0 AS y, _xmt_edge_UF_5.a_1 AS z, "true" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_5
    F: SELECT _xmt_edge_TU_5.a_0 AS y, _xmt_edge_TU_5.a_1 AS z, "false" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_5
    G : SELECT _xmt_edge_G_5.a_0 AS y, _xmt_edge_G_5.a_1 AS z, not_(_xmt_edge_G_5.G) AS G FROM _xmt_edge_G AS _xmt_edge_G_5
 - (Edge x z):
    T: SELECT _xmt_edge_TU_7.a_0 AS x, _xmt_edge_TU_7.a_1 AS z, "true" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_7
    F: SELECT _xmt_edge_UF_7.a_0 AS x, _xmt_edge_UF_7.a_1 AS z, "false" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_7
    G : SELECT _xmt_edge_G_7.a_0 AS x, _xmt_edge_G_7.a_1 AS z, _xmt_edge_G_7.G AS G FROM _xmt_edge_G AS _xmt_edge_G_7
 - (not (Edge x z)):
    T: SELECT _xmt_edge_UF_7.a_0 AS x, _xmt_edge_UF_7.a_1 AS z, "true" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_7
    F: SELECT _xmt_edge_TU_7.a_0 AS x, _xmt_edge_TU_7.a_1 AS z, "false" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_7
    G : SELECT _xmt_edge_G_7.a_0 AS x, _xmt_edge_G_7.a_1 AS z, not_(_xmt_edge_G_7.G) AS G FROM _xmt_edge_G AS _xmt_edge_G_7
 - (phi x y z):
    TU: SELECT _xmt_node.G AS x, _xmt_node_1.G AS y, _xmt_node_4.G AS z, apply("phi", _xmt_node.G, _xmt_node_1.G, _xmt_node_4.G) AS G FROM _xmt_node JOIN _xmt_node AS _xmt_node_1 JOIN _xmt_node AS _xmt_node_4
    UF: SELECT _xmt_node.G AS x, _xmt_node_1.G AS y, _xmt_node_4.G AS z, apply("phi", _xmt_node.G, _xmt_node_1.G, _xmt_node_4.G) AS G FROM _xmt_node JOIN _xmt_node AS _xmt_node_1 JOIN _xmt_node AS _xmt_node_4
    G : SELECT _xmt_node.G AS x, _xmt_node_1.G AS y, _xmt_node_4.G AS z, apply("phi", _xmt_node.G, _xmt_node_1.G, _xmt_node_4.G) AS G FROM _xmt_node JOIN _xmt_node AS _xmt_node_1 JOIN _xmt_node AS _xmt_node_4
 - (or (not (Edge x y)) (not (Edge y z)) (not (Edge x z)) (phi x y z)):
    TU: SELECT x, y, z, or_aggregate(G) as G from (SELECT negate_3.x AS x, negate_3.y AS y, _xmt_node_4.z AS z, negate_3.G AS G FROM negate_3 JOIN _xmt_node AS _xmt_node_4 UNION SELECT _xmt_node.x AS x, negate_6.y AS y, negate_6.z AS z, negate_6.G AS G FROM negate_6 JOIN _xmt_node UNION SELECT negate_8.x AS x, _xmt_node_1.y AS y, negate_8.z AS z, negate_8.G AS G FROM negate_8 JOIN _xmt_node AS _xmt_node_1 UNION SELECT _xmt_phi_9_12.x AS x, _xmt_phi_9_12.y AS y, _xmt_phi_9_12.z AS z, _xmt_phi_9_12.G AS G FROM _xmt_phi_9_12) GROUP BY x, y, z
    UF: SELECT _xmt_edge_TU_2.a_0 AS x, _xmt_edge_TU_2.a_1 AS y, _xmt_edge_TU_5.a_1 AS z, apply("phi", _xmt_edge_TU_2.a_0, _xmt_edge_TU_2.a_1, _xmt_edge_TU_5.a_1) AS G FROM _xmt_edge_TU AS _xmt_edge_TU_2 JOIN _xmt_edge_TU AS _xmt_edge_TU_5 ON _xmt_edge_TU_2.a_1 = _xmt_edge_TU_5.a_0 JOIN _xmt_edge_TU AS _xmt_edge_TU_7 ON _xmt_edge_TU_2.a_0 = _xmt_edge_TU_7.a_0 AND _xmt_edge_TU_5.a_1 = _xmt_edge_TU_7.a_1
    G : SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_5.a_1 AS z, apply("or", not_(_xmt_edge_G_2.G), not_(_xmt_edge_G_5.G), not_(_xmt_edge_G_7.G), apply("phi", _xmt_edge_G_2.a_0, _xmt_edge_G_2.a_1, _xmt_edge_G_5.a_1)) AS G FROM _xmt_edge_G AS _xmt_edge_G_2 JOIN _xmt_edge_G AS _xmt_edge_G_5 ON _xmt_edge_G_2.a_1 = _xmt_edge_G_5.a_0 JOIN _xmt_edge_G AS _xmt_edge_G_7 ON _xmt_edge_G_2.a_0 = _xmt_edge_G_7.a_0 AND _xmt_edge_G_5.a_1 = _xmt_edge_G_7.a_1
 - (forall ((x Node) (y Node) (z Node)) (or (not (Edge x y)) (not (Edge y z)) (not (Edge x z)) (phi x y z))):
    TU: SELECT and_aggregate(G) as G from (SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_5.a_1 AS z, apply("or", not_(_xmt_edge_G_2.G), not_(_xmt_edge_G_5.G), not_(_xmt_edge_G_7.G), apply("phi", _xmt_edge_G_2.a_0, _xmt_edge_G_2.a_1, _xmt_edge_G_5.a_1)) AS G FROM _xmt_edge_G AS _xmt_edge_G_2 JOIN _xmt_edge_G AS _xmt_edge_G_5 ON _xmt_edge_G_2.a_1 = _xmt_edge_G_5.a_0 JOIN _xmt_edge_G AS _xmt_edge_G_7 ON _xmt_edge_G_2.a_0 = _xmt_edge_G_7.a_0 AND _xmt_edge_G_5.a_1 = _xmt_edge_G_7.a_1)
    UF: SELECT G as G from (SELECT _xmt_edge_TU_2.a_0 AS x, _xmt_edge_TU_2.a_1 AS y, _xmt_edge_TU_5.a_1 AS z, apply("phi", _xmt_edge_TU_2.a_0, _xmt_edge_TU_2.a_1, _xmt_edge_TU_5.a_1) AS G FROM _xmt_edge_TU AS _xmt_edge_TU_2 JOIN _xmt_edge_TU AS _xmt_edge_TU_5 ON _xmt_edge_TU_2.a_1 = _xmt_edge_TU_5.a_0 JOIN _xmt_edge_TU AS _xmt_edge_TU_7 ON _xmt_edge_TU_2.a_0 = _xmt_edge_TU_7.a_0 AND _xmt_edge_TU_5.a_1 = _xmt_edge_TU_7.a_1)
    G : SELECT and_aggregate(G) as G from (SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_5.a_1 AS z, apply("or", not_(_xmt_edge_G_2.G), not_(_xmt_edge_G_5.G), not_(_xmt_edge_G_7.G), apply("phi", _xmt_edge_G_2.a_0, _xmt_edge_G_2.a_1, _xmt_edge_G_5.a_1)) AS G FROM _xmt_edge_G AS _xmt_edge_G_2 JOIN _xmt_edge_G AS _xmt_edge_G_5 ON _xmt_edge_G_2.a_1 = _xmt_edge_G_5.a_0 JOIN _xmt_edge_G AS _xmt_edge_G_7 ON _xmt_edge_G_2.a_0 = _xmt_edge_G_7.a_0 AND _xmt_edge_G_5.a_1 = _xmt_edge_G_7.a_1)
 - (Edge x x):
    T: SELECT _xmt_edge_TU_12.a_0 AS x, "true" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_12 WHERE _xmt_edge_TU_12.a_0 = _xmt_edge_TU_12.a_1
    F: SELECT _xmt_edge_UF_12.a_0 AS x, "false" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_12 WHERE _xmt_edge_UF_12.a_0 = _xmt_edge_UF_12.a_1
    G : SELECT _xmt_edge_G_12.a_0 AS x, _xmt_edge_G_12.G AS G FROM _xmt_edge_G AS _xmt_edge_G_12 WHERE _xmt_edge_G_12.a_0 = _xmt_edge_G_12.a_1
 - (forall ((x Node)) (Edge x x)):
    TU: SELECT and_aggregate(G) as G from (SELECT _xmt_edge_G_12.a_0 AS x, _xmt_edge_G_12.G AS G FROM _xmt_edge_G AS _xmt_edge_G_12 WHERE _xmt_edge_G_12.a_0 = _xmt_edge_G_12.a_1)
    UF: SELECT G as G from (SELECT _xmt_edge_UF_12.a_0 AS x, "false" AS G FROM _xmt_edge_UF AS _xmt_edge_UF_12 WHERE _xmt_edge_UF_12.a_0 = _xmt_edge_UF_12.a_1)
    G : SELECT and_aggregate(G) as G from (SELECT _xmt_edge_G_12.a_0 AS x, _xmt_edge_G_12.G AS G FROM _xmt_edge_G AS _xmt_edge_G_12 WHERE _xmt_edge_G_12.a_0 = _xmt_edge_G_12.a_1)
 - (exists ((x Node) (y Node)) (Edge x y)):
    TU: SELECT or_aggregate(G) as G from (SELECT _xmt_edge_TU_2.a_0 AS x, _xmt_edge_TU_2.a_1 AS y, "true" AS G FROM _xmt_edge_TU AS _xmt_edge_TU_2)
    UF: SELECT or_aggregate(G) as G from (SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_2.G AS G FROM _xmt_edge_G AS _xmt_edge_G_2)
    G : SELECT or_aggregate(G) as G from (SELECT _xmt_edge_G_2.a_0 AS x, _xmt_edge_G_2.a_1 AS y, _xmt_edge_G_2.G AS G FROM _xmt_edge_G AS _xmt_edge_G_2)
(check-sat)
