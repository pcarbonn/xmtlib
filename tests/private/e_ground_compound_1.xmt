(set-option :backend none)
(declare-datatype T ( ( a ) ( b ) ( c )))
(declare-datatype Tf ( ( A ) ( B ) ))
(declare-fun p (T Tf) Bool)
(x-interpret-fun p
  (x-mapping
   ((a A) true)
   ((a B) false)
   ((b A) false)
  ) ?)
(declare-fun f (T) Tf)
(x-interpret-fun f (x-mapping
   ((a) A)
) ? )

(assert (p b B))
(assert (and (p b (f b)) (p a (f b))))
(x-ground :debug :sql)

(echo "or")
(assert (or (p b (f b)) (p a (f b))))
(x-ground :debug :sql)

(echo "forall")
(assert (forall ((x T)) (p x (f x)) ))
(x-ground :debug :sql)
(x-debug db _xmt_interp_p_g)
(x-debug solver generators)
(x-debug db tables)
------- RESULTS ------------------
(declare-datatype T ((a) (b) (c)))
(declare-datatype Tf ((A) (B)))
(declare-fun p (T Tf) Bool)
(declare-fun f (T) Tf)
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT _xmt_interp_p_UF_2.G AS G
;         FROM _xmt_interp_p_UF AS _xmt_interp_p_UF_2
;        WHERE "b" = _xmt_interp_p_UF_2.a_1 
;              AND "B" = _xmt_interp_p_UF_2.a_2)
; WHERE G <> "true"(assert (p b B))

; ==== Query =============================
;-- Agg (0)
;SELECT implies_(if_, G) as G
; FROM (-- Join(7)
;       SELECT if_(_xmt_interp_f_G_3.G, _xmt_interp_p_UF_4.a_2) AS if_, 
;              _xmt_interp_p_UF_4.G AS G
;         FROM _xmt_interp_f_G AS _xmt_interp_f_G_3
;         JOIN _xmt_interp_p_UF AS _xmt_interp_p_UF_4
;               ON "b" = _xmt_interp_p_UF_4.a_1 
;              AND (NOT is_id(_xmt_interp_f_G_3.G) OR _xmt_interp_f_G_3.G = _xmt_interp_p_UF_4.a_2)
;        WHERE "b" = _xmt_interp_f_G_3.a_1
;       UNION ALL
;       -- Join(7)
;       SELECT if_(_xmt_interp_f_G_3.G, _xmt_interp_p_UF_6.a_2) AS if_, 
;              _xmt_interp_p_UF_6.G AS G
;         FROM _xmt_interp_f_G AS _xmt_interp_f_G_3
;         JOIN _xmt_interp_p_UF AS _xmt_interp_p_UF_6
;               ON "a" = _xmt_interp_p_UF_6.a_1 
;              AND (NOT is_id(_xmt_interp_f_G_3.G) OR _xmt_interp_f_G_3.G = _xmt_interp_p_UF_6.a_2)
;        WHERE "b" = _xmt_interp_f_G_3.a_1)(assert (not (= (f b) A)))
(assert (=> (= (f b) B) (p b B)))
(assert (not (= (f b) B)))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
(echo "or")
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT or_(Agg_0.G, Agg_1.G) AS G
;         FROM (-- Agg (15)
;               SELECT and_aggregate(implies_(if_, G)) as G
;                FROM (-- exclude(22)
;                      SELECT *
;                       FROM (-- Join(29)
;                             SELECT if_(_xmt_interp_f_G_3.G, _xmt_interp_p_UF_8.a_2) AS if_, 
;                                    _xmt_interp_p_UF_8.G AS G
;                               FROM _xmt_interp_f_G AS _xmt_interp_f_G_3
;                               JOIN _xmt_interp_p_UF AS _xmt_interp_p_UF_8
;                                     ON "b" = _xmt_interp_p_UF_8.a_1 
;                                    AND (NOT is_id(_xmt_interp_f_G_3.G) OR _xmt_interp_f_G_3.G = _xmt_interp_p_UF_8.a_2)
;                              WHERE "b" = _xmt_interp_f_G_3.a_1)
;                       WHERE G <> "true")
;               ) AS Agg_0
;         JOIN (-- Agg (15)
;               SELECT and_aggregate(implies_(if_, G)) as G
;                FROM (-- exclude(22)
;                      SELECT *
;                       FROM (-- Join(29)
;                             SELECT if_(_xmt_interp_f_G_3.G, _xmt_interp_p_UF_9.a_2) AS if_, 
;                                    _xmt_interp_p_UF_9.G AS G
;                               FROM _xmt_interp_f_G AS _xmt_interp_f_G_3
;                               JOIN _xmt_interp_p_UF AS _xmt_interp_p_UF_9
;                                     ON "a" = _xmt_interp_p_UF_9.a_1 
;                                    AND (NOT is_id(_xmt_interp_f_G_3.G) OR _xmt_interp_f_G_3.G = _xmt_interp_p_UF_9.a_2)
;                              WHERE "b" = _xmt_interp_f_G_3.a_1)
;                       WHERE G <> "true")
;               ) AS Agg_1)
; WHERE G <> "true"(assert (or (and (not (= (f b) A)) (=> (= (f b) B) (p b B))) (not (= (f b) B))))

; ==== Query =============================
;SELECT "true"
(echo "forall")
; ==== Query =============================
;-- Agg (0)
;SELECT implies_(if_, G) as G
; FROM (-- exclude(7)
;       SELECT *
;        FROM (-- Join(14)
;              SELECT _xmt_interp_p_UF_13.a_1 AS x,
;                     if_(_xmt_interp_f_G_12.G, _xmt_interp_p_UF_13.a_2) AS if_, 
;                     _xmt_interp_p_UF_13.G AS G
;                FROM _xmt_interp_f_G AS _xmt_interp_f_G_12
;                JOIN _xmt_interp_p_UF AS _xmt_interp_p_UF_13
;                      ON (NOT is_id(_xmt_interp_f_G_12.G) OR _xmt_interp_f_G_12.G = _xmt_interp_p_UF_13.a_2)
;               WHERE _xmt_interp_p_UF_13.a_1 = _xmt_interp_f_G_12.a_1)
;        WHERE G <> "true")(assert (not (= (f b) A)))
(assert (=> (= (f b) B) (p b B)))
(assert (=> (= (f c) A) (p c A)))
(assert (=> (= (f c) B) (p c B)))

; ==== Query =============================
;SELECT "true"
 TABLE: _xmt_interp_p_g
┌─────┬─────┬───────────┐
│ a_1 │ a_2 │ G         │
├─────┼─────┼───────────┤
│ "a" │ "A" │ "true"    │
├─────┼─────┼───────────┤
│ "b" │ "A" │ "false"   │
├─────┼─────┼───────────┤
│ "c" │ "A" │ "(p c A)" │
├─────┼─────┼───────────┤
│ "a" │ "B" │ "false"   │
├─────┼─────┼───────────┤
│ "b" │ "B" │ "(p b B)" │
├─────┼─────┼───────────┤
│ "c" │ "B" │ "(p c B)" │
└─────┴─────┴───────────┘
Generators:
=== (p b B) ======================================
TODO: generator
=== (and (p b (f b)) (p a (f b))) ======================================
TODO: generator
=== (or (p b (f b)) (p a (f b))) ======================================
TODO: generator
=== (forall ((x T)) (p x (f x))) ======================================
TODO: generator
===========================================
Tables and Views:
 - Bool (table)
 - _xmt_sort_t (table)
 - _xmt_sort_tf (table)
 - _xmt_interp_p_TU_K (table)
 - _xmt_interp_p_UF_K (table)
 - _xmt_interp_p_K (table)
 - _xmt_interp_p_U (view)
 - _xmt_interp_p_G (view)
 - _xmt_interp_p_TU (view)
 - _xmt_interp_p_UF (view)
 - _xmt_interp_f_K (table)
 - _xmt_interp_f_U (view)
 - _xmt_interp_f_G (view)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
