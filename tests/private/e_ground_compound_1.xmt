(set-option :backend none)
(declare-datatype T ( ( a ) ( b ) ))
(declare-datatype Tf ( ( A ) ( B ) ))
(declare-datatype bol ( ( TRUE ) ( FALSE )))
(declare-fun p (T Tf) bol)
(x-interpret-fun p (
   ((a A) TRUE)
   ((a B) FALSE)
   ((b A) FALSE)
) ?)
(declare-fun f (T) Tf)
(x-interpret-fun f (
   ((a) A)
) ? )
(assert (= (p b B) TRUE))
(assert (forall ((x T)) (= (p x (f x)) TRUE)))
(x-ground)
(x-debug db p_g)
(x-debug solver groundings)
-------------------------
(declare-datatype T ((a ) (b )))
(declare-datatype Tf ((A ) (B )))
(declare-datatype bol ((TRUE ) (FALSE )))
(declare-fun p (T Tf) bol)
(declare-fun f (T) Tf)
(assert (= (p b B) TRUE))
(assert (not (= (f b) A)))
(assert (=> (= (f b) B) (= (p b B) TRUE)))
 TABLE: p_g
┌─────┬─────┬───────────┐
│ a_0 │ a_1 │ G         │
├─────┼─────┼───────────┤
│ "a" │ "A" │ "TRUE"    │
├─────┼─────┼───────────┤
│ "a" │ "B" │ "FALSE"   │
├─────┼─────┼───────────┤
│ "b" │ "A" │ "FALSE"   │
├─────┼─────┼───────────┤
│ "b" │ "B" │ "(p b B)" │
└─────┴─────┴───────────┘
Groundings:
 - b: SELECT "b" AS G
 - B: SELECT "B" AS G
 - (p b B): SELECT p_G_2.G AS G FROM p_G AS p_G_2 WHERE "b" = p_G_2.a_0 AND "B" = p_G_2.a_1
 - TRUE: SELECT "TRUE" AS G
 - (= (p b B) TRUE):
    TU: SELECT eq_(p_G_2.G, "TRUE") AS G FROM p_G AS p_G_2 WHERE "b" = p_G_2.a_0 AND "B" = p_G_2.a_1
    UF: SELECT eq_(p_G_2.G, "TRUE") AS G FROM p_G AS p_G_2 WHERE "b" = p_G_2.a_0 AND "B" = p_G_2.a_1
    G : SELECT eq_(p_G_2.G, "TRUE") AS G FROM p_G AS p_G_2 WHERE "b" = p_G_2.a_0 AND "B" = p_G_2.a_1
 - x: SELECT T_5.G AS x, T_5.G AS G FROM T AS T_5
 - (f x): SELECT f_G_6.a_0 AS x, f_G_6.G AS G FROM f_G AS f_G_6
 - (p x (f x)): SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, p_G_7.G AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0
 - (= (p x (f x)) TRUE):
    TU: SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, eq_(p_G_7.G, "TRUE") AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0
    UF: SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, eq_(p_G_7.G, "TRUE") AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0
    G : SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, eq_(p_G_7.G, "TRUE") AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0
 - (forall ((x T)) (= (p x (f x)) TRUE)):
    TU: SELECT and_aggregate(implies_(if_, G)) as G from (SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, eq_(p_G_7.G, "TRUE") AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0)
    UF: SELECT implies_(if_, G) as G from (SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, eq_(p_G_7.G, "TRUE") AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0)
    G : SELECT and_aggregate(implies_(if_, G)) as G from (SELECT p_G_7.a_0 AS x, if_(f_G_6.G, p_G_7.a_1) AS if_, eq_(p_G_7.G, "TRUE") AS G FROM f_G AS f_G_6 JOIN p_G AS p_G_7 ON join_(f_G_6.G, p_G_7.a_1) WHERE p_G_7.a_0 = f_G_6.a_0)
