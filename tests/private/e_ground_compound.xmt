(set-option :backend none)
(declare-datatype T ( ( a ) ( b ) ))
(declare-datatype Tf ( ( A ) ( B ) ))
(declare-datatype bol ( ( TRUE ) ( FALSE )))
(declare-fun p (T Tf) bol)
(x-interpret-fun p (
   ((a A) TRUE)
   ((a B) FALSE)
   ((b A) FALSE)
) ?)

(declare-fun f (T) Tf)
(x-interpret-fun f (
   ((b) B)
) ? )
(assert (= (p a a) TRUE))
(assert (exists ((x T)) (= (p x (f x)) TRUE)))
(x-ground)
(x-debug solver groundings)
-------------------------
(declare-datatype T ((a ) (b )))
(declare-datatype Tf ((A ) (B )))
(declare-datatype bol ((TRUE ) (FALSE )))
(declare-fun p (T Tf) bol)
(declare-fun f (T) Tf)
(assert (or (= (p a (f a)) TRUE) (= (p b B) TRUE)))
Groundings:
 - a: SELECT "a" AS G
 - (p a a): SELECT IFNULL(p_G_1.G, apply("p", "a", "a")) AS G FROM p_G AS p_G_1 WHERE "a" = p_G_1.a_0 AND "a" = p_G_1.a_1
 - TRUE: SELECT "TRUE" AS G
 - (= (p a a) TRUE):
    T: SELECT eq_(IFNULL(p_G_1.G, apply("p", "a", "a")), "TRUE") AS G FROM p_G AS p_G_1 WHERE "a" = p_G_1.a_0 AND "a" = p_G_1.a_1
    F: SELECT eq_(IFNULL(p_G_1.G, apply("p", "a", "a")), "TRUE") AS G FROM p_G AS p_G_1 WHERE "a" = p_G_1.a_0 AND "a" = p_G_1.a_1
    G : SELECT eq_(IFNULL(p_G_1.G, apply("p", "a", "a")), "TRUE") AS G FROM p_G AS p_G_1 WHERE "a" = p_G_1.a_0 AND "a" = p_G_1.a_1
 - x: SELECT T_4.G AS x, T_4.G AS G FROM T AS T_4
 - (f x): SELECT T_4.G AS x, IFNULL(f_G_5.G, apply("f", T_4.G)) AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0
 - (p x (f x)): SELECT T_4.G AS x, IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))) AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1
 - (= (p x (f x)) TRUE):
    T: SELECT T_4.G AS x, eq_(IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))), "TRUE") AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1
    F: SELECT T_4.G AS x, eq_(IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))), "TRUE") AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1
    G : SELECT T_4.G AS x, eq_(IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))), "TRUE") AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1
 - (exists ((x T)) (= (p x (f x)) TRUE)):
    TU: SELECT or_aggregate(G) as G from (SELECT T_4.G AS x, eq_(IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))), "TRUE") AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1)
    UF: SELECT or_aggregate(G) as G from (SELECT T_4.G AS x, eq_(IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))), "TRUE") AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1)
    G : SELECT or_aggregate(G) as G from (SELECT T_4.G AS x, eq_(IFNULL(p_G_6.G, apply("p", T_4.G, IFNULL(f_G_5.G, apply("f", T_4.G)))), "TRUE") AS G FROM T AS T_4 LEFT JOIN f_G AS f_G_5 ON T_4.G = f_G_5.a_0 LEFT JOIN p_G AS p_G_6 ON T_4.G = p_G_6.a_0 AND IFNULL(f_G_5.G, apply("f", T_4.G)) = p_G_6.a_1)
