(set-option :backend none)
(assert (<= 2 2 2))
(assert (< 1 2 3))
(assert (not (= 2 2)))
(assert (= (<= 2 2) (not (<= 3 3))))
(assert (and (<= 2 2) (not (<= 3 3))))
(assert (distinct 1 2 3))

(assert (and (<= 2.0 2.0) (not (<= 3.0 3.0))))
(assert (distinct 1.0 2.0 3.0))

(x-ground :debug :sql)
(x-debug solver generators)
(x-debug db tables)
------- RESULTS ------------------
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT compare_("<=", 2, 2, 2) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT compare_("<", 1, 2, 3) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT not_("true") AS G)
; WHERE G <> "true"(assert false)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(compare_("<=", 2, 2), not_(compare_("<=", 3, 3))) AS G)
; WHERE G <> "true"(assert false)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Agg (7)
;       SELECT G as G
;        FROM (-- exclude(14)
;              SELECT *
;               FROM (-- Join(21)
;                     SELECT compare_("<=", 2, 2) AS G
;                     UNION ALL
;                     -- Join(21)
;                     SELECT not_(compare_("<=", 3, 3)) AS G)
;               WHERE G <> "true"))
; WHERE G <> "true"(assert false)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT apply("distinct", 1, 2, 3) AS G)
; WHERE G <> "true"(assert (distinct 1 2 3))

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Agg (7)
;       SELECT G as G
;        FROM (-- exclude(14)
;              SELECT *
;               FROM (-- Join(21)
;                     SELECT compare_("<=", 2.0, 2.0) AS G
;                     UNION ALL
;                     -- Join(21)
;                     SELECT not_(compare_("<=", 3.0, 3.0)) AS G)
;               WHERE G <> "true"))
; WHERE G <> "true"(assert false)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT apply("distinct", 1.0, 2.0, 3.0) AS G)
; WHERE G <> "true"(assert (distinct 1 2 3))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (<= 2 2 2) ======================================
TODO: generator
=== (< 1 2 3) ======================================
TODO: generator
=== (not (= 2 2)) ======================================
TODO: generator
=== (= (<= 2 2) (not (<= 3 3))) ======================================
TODO: generator
=== (and (<= 2 2) (not (<= 3 3))) ======================================
TODO: generator
=== (distinct 1 2 3) ======================================
TODO: generator
=== (and (<= 2.0 2.0) (not (<= 3.0 3.0))) ======================================
TODO: generator
=== (distinct 1.0 2.0 3.0) ======================================
TODO: generator
===========================================
Tables and Views:
 - Bool (table)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
