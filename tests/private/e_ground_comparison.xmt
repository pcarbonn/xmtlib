(set-option :backend none)
(assert (<= 2 2 2))
(assert (< 1 2 3))
(assert (not (= 2 2)))
(assert (= (<= 2 2) (not (<= 3 3))))
(assert (and (<= 2 2) (not (<= 3 3))))
(assert (distinct 1 2 3))

(assert (and (<= 2.0 2.0) (not (<= 3.0 3.0))))
(assert (distinct 1.0 2.0 3.0))

(x-ground)
(x-debug solver groundings)
(x-debug db tables)
-------------------------
(assert false)
(assert false)
(assert false)
(assert (distinct 1 2 3))
(assert false)
(assert (distinct 1 2 3))
Groundings:
===  2 ======================================
 -- Join(0)
SELECT 2 AS G
=== (top) (<= 2 2 2) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2, 2, 2) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2, 2, 2) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2, 2, 2) AS G

===  1 ======================================
 -- Join(0)
SELECT 1 AS G
===  3 ======================================
 -- Join(0)
SELECT 3 AS G
=== (top) (< 1 2 3) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT compare_("<", 1, 2, 3) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT compare_("<", 1, 2, 3) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT compare_("<", 1, 2, 3) AS G

===  (= 2 2) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT "true" AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT "true" AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT "true" AS G

=== (top) (not (= 2 2)) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT not_("true") AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT not_("true") AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT not_("true") AS G

===  (<= 2 2) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2, 2) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2, 2) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2, 2) AS G

===  (<= 3 3) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 3, 3) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 3, 3) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 3, 3) AS G

===  (not (<= 3 3)) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT not_(compare_("<=", 3, 3)) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT not_(compare_("<=", 3, 3)) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT not_(compare_("<=", 3, 3)) AS G

=== (top) (= (<= 2 2) (not (<= 3 3))) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT bool_eq_("true", Outer_0.G, Outer_1.G) AS G
  FROM (-- Join(8)
        SELECT compare_("<=", 2, 2) AS G
        ) AS Outer_0
  FULL JOIN (-- Join(8)
        SELECT not_(compare_("<=", 3, 3)) AS G
        ) AS Outer_1
----- F ------------------------------------------------------------
-- Join(0)
SELECT bool_eq_("true", Outer_0.G, Outer_1.G) AS G
  FROM (-- Join(8)
        SELECT compare_("<=", 2, 2) AS G
        ) AS Outer_0
  FULL JOIN (-- Join(8)
        SELECT not_(compare_("<=", 3, 3)) AS G
        ) AS Outer_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT bool_eq_("true", Outer_0.G, Outer_1.G) AS G
  FROM (-- Join(8)
        SELECT compare_("<=", 2, 2) AS G
        ) AS Outer_0
  FULL JOIN (-- Join(8)
        SELECT not_(compare_("<=", 3, 3)) AS G
        ) AS Outer_1

=== (top) (and (<= 2 2) (not (<= 3 3))) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT and_(compare_("<=", 2, 2), not_(compare_("<=", 3, 3))) AS G
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT compare_("<=", 2, 2) AS G
              UNION
              -- Join(14)
              SELECT not_(compare_("<=", 3, 3)) AS G)
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Join(0)
SELECT and_(compare_("<=", 2, 2), not_(compare_("<=", 3, 3))) AS G

=== (top) (distinct 1 2 3) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT apply("distinct", 1, 2, 3) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT apply("distinct", 1, 2, 3) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT apply("distinct", 1, 2, 3) AS G

===  2.0 ======================================
 -- Join(0)
SELECT 2.0 AS G
===  (<= 2.0 2.0) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2.0, 2.0) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2.0, 2.0) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 2.0, 2.0) AS G

===  3.0 ======================================
 -- Join(0)
SELECT 3.0 AS G
===  (<= 3.0 3.0) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 3.0, 3.0) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 3.0, 3.0) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT compare_("<=", 3.0, 3.0) AS G

===  (not (<= 3.0 3.0)) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT not_(compare_("<=", 3.0, 3.0)) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT not_(compare_("<=", 3.0, 3.0)) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT not_(compare_("<=", 3.0, 3.0)) AS G

=== (top) (and (<= 2.0 2.0) (not (<= 3.0 3.0))) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT and_(compare_("<=", 2.0, 2.0), not_(compare_("<=", 3.0, 3.0))) AS G
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT compare_("<=", 2.0, 2.0) AS G
              UNION
              -- Join(14)
              SELECT not_(compare_("<=", 3.0, 3.0)) AS G)
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Join(0)
SELECT and_(compare_("<=", 2.0, 2.0), not_(compare_("<=", 3.0, 3.0))) AS G

===  1.0 ======================================
 -- Join(0)
SELECT 1.0 AS G
=== (top) (distinct 1.0 2.0 3.0) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT apply("distinct", 1.0, 2.0, 3.0) AS G
----- F ------------------------------------------------------------
-- Join(0)
SELECT apply("distinct", 1.0, 2.0, 3.0) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT apply("distinct", 1.0, 2.0, 3.0) AS G

===========================================
Tables and Views:
 - Bool (table)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
