(set-option :backend none)
(declare-datatype Color ( ( red ) ( green ) ))

; arity 0
(declare-const C Color)
(x-interpret-const C red)
(declare-fun c () Color)
(x-interpret-fun c (x-mapping (() red)))
(assert (= c green))
(declare-fun p () Bool)
(x-interpret-fun p (x-mapping ) true)

; arity 2
(declare-fun Mix (Color Color) Color)
(declare-fun mix (Color Color) Color)
(x-interpret-fun mix
   (x-mapping
     ((red red) green)
     ((green green) ?)
     ((red green) green)
     ((green red) green)
   ))
(x-interpret-fun Mix
   (x-mapping
      ((red red) green)
   ) ?)
(assert (exists ((x Color)) (= (mix x x) x)))
(assert (exists ((x Color)) (= (mix x x) x green)))

(x-ground)
(x-debug solver functions)
(x-debug solver groundings)
(x-debug db tables)
(x-debug db _xmt_p_UF)
(x-debug db _xmt_mix_g)

; infinite
(declare-fun RGB (Int) Color)
(x-interpret-fun RGB
   (x-mapping
      ((0) red)
   ) red
)
-------------------------
(declare-datatype Color ((red ) (green )))
(declare-const C Color)
(declare-fun c () Color)
(declare-fun p () Bool)
(declare-fun Mix (Color Color) Color)
(declare-fun mix (Color Color) Color)
(assert false)
(assert (= (mix green green) green))
(assert (= (mix green green) green green))
Functions:
 - true: Constructor
 - false: Constructor
 - not: Predefined (true)
 - =>: Predefined (true)
 - and: Predefined (true)
 - or: Predefined (true)
 - xor: Predefined (true)
 - =: Predefined (true)
 - distinct: Predefined (true)
 - <=: Predefined (true)
 - <: Predefined (true)
 - >=: Predefined (true)
 - >: Predefined (true)
 - ite: Predefined (?)
 - let: Predefined (?)
 - +: Predefined (false)
 - -: Predefined (false)
 - *: Predefined (false)
 - div: Predefined (false)
 - mod: Predefined (false)
 - abs: Predefined (false)
 - red: Constructor
 - green: Constructor
 - C: Non Boolean (_xmt_c_G Complete)
 - c: Non Boolean (_xmt_c_2_G Complete)
 - p: Boolean (_xmt_p_TU Complete, _xmt_p_UF Complete, _xmt_p_G Complete)
 - Mix: Non Boolean (_xmt_mix_5_G Partial)
 - mix: Non Boolean (_xmt_mix_G Partial)
Groundings:
 - c: SELECT _xmt_c_2_G.G AS G
  FROM _xmt_c_2_G AS _xmt_c_2_G
 - green: SELECT "green" AS G
 - (= c green):
    T: SELECT eq_(_xmt_c_2_G.G, "green") AS G
  FROM _xmt_c_2_G AS _xmt_c_2_G
    F: SELECT eq_(_xmt_c_2_G.G, "green") AS G
  FROM _xmt_c_2_G AS _xmt_c_2_G
    G : SELECT eq_(_xmt_c_2_G.G, "green") AS G
  FROM _xmt_c_2_G AS _xmt_c_2_G
 - x: SELECT _xmt_color_3.G AS x,
       _xmt_color_3.G AS G
  FROM _xmt_color AS _xmt_color_3
 - (mix x x): SELECT _xmt_mix_G_4.a_1 AS x,
       _xmt_mix_G_4.G AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
 - (= (mix x x) x):
    TU: SELECT _xmt_mix_G_4.a_1 AS x,
       eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1) AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
    UF: SELECT _xmt_mix_G_4.a_1 AS x,
       eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1) AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
    G : SELECT _xmt_mix_G_4.a_1 AS x,
       eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1) AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
 - (exists ((x Color)) (= (mix x x) x)):
    TU: SELECT or_aggregate(G) as G
 FROM (SELECT _xmt_mix_G_4.a_1 AS x,
              eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1) AS G
         FROM _xmt_mix_G AS _xmt_mix_G_4
        WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2)
    UF: SELECT or_aggregate(G) as G
 FROM (SELECT _xmt_mix_G_4.a_1 AS x,
              eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1) AS G
         FROM _xmt_mix_G AS _xmt_mix_G_4
        WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2)
    G : SELECT or_aggregate(G) as G
 FROM (SELECT _xmt_mix_G_4.a_1 AS x,
              eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1) AS G
         FROM _xmt_mix_G AS _xmt_mix_G_4
        WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2)
 - (= (mix x x) x green):
    TU: SELECT _xmt_mix_G_4.a_1 AS x,
       eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1, "green") AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
    UF: SELECT _xmt_mix_G_4.a_1 AS x,
       eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1, "green") AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
    G : SELECT _xmt_mix_G_4.a_1 AS x,
       eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1, "green") AS G
  FROM _xmt_mix_G AS _xmt_mix_G_4
 WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2
 - (exists ((x Color)) (= (mix x x) x green)):
    TU: SELECT or_aggregate(G) as G
 FROM (SELECT _xmt_mix_G_4.a_1 AS x,
              eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1, "green") AS G
         FROM _xmt_mix_G AS _xmt_mix_G_4
        WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2)
    UF: SELECT or_aggregate(G) as G
 FROM (SELECT _xmt_mix_G_4.a_1 AS x,
              eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1, "green") AS G
         FROM _xmt_mix_G AS _xmt_mix_G_4
        WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2)
    G : SELECT or_aggregate(G) as G
 FROM (SELECT _xmt_mix_G_4.a_1 AS x,
              eq_(_xmt_mix_G_4.G, _xmt_mix_G_4.a_1, "green") AS G
         FROM _xmt_mix_G AS _xmt_mix_G_4
        WHERE _xmt_mix_G_4.a_1 = _xmt_mix_G_4.a_2)
Tables and Views:
 - Bool (table)
 - _xmt_color (table)
 - _xmt_c_G (view)
 - _xmt_c_2_G (view)
 - _xmt_p_TU (view)
 - _xmt_p_UF (view)
 - _xmt_p_G (view)
 - _xmt_mix_G (table)
 - _xmt_mix_5_K (table)
 - _xmt_mix_5_U (view)
 - _xmt_mix_5_G (view)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
 TABLE: _xmt_p_uf
┌───┐
│ G │
└───┘
 TABLE: _xmt_mix_g
┌─────────┬─────────┬─────────────────────┐
│ a_1     │ a_2     │ G                   │
├─────────┼─────────┼─────────────────────┤
│ "red"   │ "red"   │ "green"             │
├─────────┼─────────┼─────────────────────┤
│ "green" │ "green" │ "(mix green green)" │
├─────────┼─────────┼─────────────────────┤
│ "red"   │ "green" │ "green"             │
├─────────┼─────────┼─────────────────────┤
│ "green" │ "red"   │ "green"             │
└─────────┴─────────┴─────────────────────┘
(declare-fun RGB (Int) Color)
error: at position (39, 18): Cannot interpret a symbol with infinite domain
   |
39 | (x-interpret-fun RGB
   |                  ^ Cannot interpret a symbol with infinite domain
   |