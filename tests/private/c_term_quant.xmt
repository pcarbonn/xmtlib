(set-option :backend none)
(assert (forall ((x Int)) true))
(assert (exists ((x Int)) true))
(declare-datatype Color ( ( red ) ( green ) ))
(assert (forall ((x Color)) true))
(assert (exists ((x Color)) true))
(declare-fun p (Color) Bool)
(assert (forall ((x Color)) (p x)))
(assert (exists ((x Color)) (p x)))
(declare-fun q (Int) Bool)
(assert (forall ((x Int)) (q x)))
(declare-fun r (Bool) Bool)
(assert (not (exists ((x Bool)) (r x))))
(assert (forall ((x Bool)) (=> (and (r x) (r x)) false)))

(x-ground :debug :sql)
(x-debug solver generators)
(x-debug db tables)
------- RESULTS ------------------
(declare-datatype Color ((red) (green)))
(declare-fun p (Color) Bool)
(declare-fun q (Int) Bool)
(declare-fun r (Bool) Bool)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Agg (7)
;       SELECT or_aggregate(G) as G
;        FROM (SELECT "false" AS G 
;              UNION ALL
;              -- Join(14)
;              SELECT "true" AS G))
; WHERE G <> "true"

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Agg (7)
;       SELECT or_aggregate(G) as G
;        FROM (SELECT "false" AS G 
;              UNION ALL
;              -- Join(14)
;              SELECT "true" AS G))
; WHERE G <> "true"
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_color_5.G AS x,
;              apply("p", _xmt_sort_color_5.G) AS G
;         FROM _xmt_sort_color AS _xmt_sort_color_5)(assert (p green))
(assert (p red))

; ==== Query =============================
;-- Agg (0)
;SELECT or_aggregate(G) as G
; FROM (SELECT NULL AS x, "false" AS G 
;       UNION ALL
;       -- Join(7)
;       SELECT _xmt_sort_color_5.G AS x,
;              apply("p", _xmt_sort_color_5.G) AS G
;         FROM _xmt_sort_color AS _xmt_sort_color_5)(assert (or (p green) (p red)))

; ==== Query =============================
;-- Agg (0)
;SELECT "(forall ((x Int)) " || G || ")" as G
; FROM (-- Join(7)
;       SELECT "x" AS x,
;              apply("q", "x") AS G)(assert (forall ((x Int)) (q x)))

; ==== Query =============================
;-- Agg (0)
;SELECT and_aggregate(G) as G
; FROM (-- Join(7)
;       SELECT Bool_12.G AS x,
;              apply("not", apply("r", Bool_12.G)) AS G
;         FROM Bool AS Bool_12)(assert (and (not (r true)) (not (r false))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT Bool_12.G AS x,
;              apply("not", apply("r", Bool_12.G)) AS G
;         FROM Bool AS Bool_12)(assert (not (r true)))
(assert (not (r false)))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((x Int)) true) ======================================
TODO: generator
=== (exists ((x Int)) true) ======================================
TODO: generator
=== (forall ((x Color)) true) ======================================
TODO: generator
=== (exists ((x Color)) true) ======================================
TODO: generator
=== (forall ((x Color)) (p x)) ======================================
TODO: generator
=== (exists ((x Color)) (p x)) ======================================
TODO: generator
=== (forall ((x Int)) (q x)) ======================================
TODO: generator
=== (not (exists ((x Bool)) (r x))) ======================================
TODO: generator
=== (forall ((x Bool)) (or (not (r x)) false)) ======================================
TODO: generator
===========================================
Tables and Views:
 - Bool (table)
 - _xmt_sort_color (table)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
