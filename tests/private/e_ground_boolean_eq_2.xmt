
(set-option :backend none)
(declare-datatype T ( (A) (B) ))
(declare-fun p (T T) Bool)
(assert (forall ((x T) (y T))
            (= (p x y)
                (and (= x A) (= y A))
            )
        )
)
(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype T ((A) (B)))
(declare-fun p (T T) Bool)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_t.G AS x,
;              _xmt_sort_t_1.G AS y,
;              apply("=", apply("p", _xmt_sort_t.G, _xmt_sort_t_1.G), and_(eq_(_xmt_sort_t.G, "A"), eq_(_xmt_sort_t_1.G, "A"))) AS G
;         FROM _xmt_sort_t
;         JOIN _xmt_sort_t AS _xmt_sort_t_1)(assert (= (p A A) true))
(assert (= (p A B) false))
(assert (= (p B A) false))
(assert (= (p B B) false))

; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((x T) (y T)) (= (p x y) (and (= x A) (= y A)))) ======================================
TODO: generator
===========================================
