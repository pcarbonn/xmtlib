(set-option :backend none)
(assert true)
(declare-const p Bool)
(declare-const c Int)
(assert p)
(declare-datatype Color ( ( red ) ( green ) ))
(declare-fun q (Color) Bool)
(assert (q red))
(assert (or (q red) (q green)))
(assert (or (q red) (q red)))
;(assert (or p p))
(x-ground :debug :sql)
(x-debug solver generators)
(x-debug db tables)
------- RESULTS ------------------
(declare-const p Bool)
(declare-const c Int)
(declare-datatype Color ((red) (green)))
(declare-fun q (Color) Bool)

; ==== Query =============================
;-- Join(0)
;SELECT "p" AS G(assert p)

; ==== Query =============================
;-- Join(0)
;SELECT apply("q", "red") AS G(assert (q red))

; ==== Query =============================
;-- Join(0)
;SELECT or_(apply("q", "red"), apply("q", "green")) AS G(assert (or (q red) (q green)))

; ==== Query =============================
;-- Join(0)
;SELECT or_(apply("q", "red"), apply("q", "red")) AS G(assert (or (q red) (q red)))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== true ======================================
TODO: generator
=== p ======================================
TODO: generator
=== (q red) ======================================
TODO: generator
=== (or (q red) (q green)) ======================================
TODO: generator
=== (or (q red) (q red)) ======================================
TODO: generator
===========================================
Tables and Views:
 - Bool (table)
 - _xmt_sort_color (table)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
