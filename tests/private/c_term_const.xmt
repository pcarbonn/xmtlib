(set-option :backend none)
(assert true)
(declare-const p Bool)
(declare-const c Int)
(assert p)
(declare-datatype Color ( ( red ) ( green ) ))
(declare-fun q (Color) Bool)
(assert (q red))
(assert (or (q red) (q green)))
(assert (or (q red) (q red)))
;(assert (or p p))
(x-ground :debug)
(x-debug solver groundings)
(x-debug db tables)
------- RESULTS ------------------
(declare-const p Bool)
(declare-const c Int)
(declare-datatype Color ((red) (green)))
(declare-fun q (Color) Bool)
(assert p)
(assert (q red))
(assert (or (q red) (q green)))
(assert (or (q red) (q red)))
Groundings:
=== (top) true ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT "true" AS G
----- F ------------------------------------------------------------
SELECT "true" AS G WHERE FALSE
----- G ------------------------------------------------------------
-- Join(0)
SELECT "true" AS G

=== (top) p ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT "p" AS G
----- UF -----------------------------------------------------------
-- Join(0)
SELECT "p" AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT "p" AS G

===  red ======================================
 -- Join(0)
SELECT "red" AS G
=== (top) (q red) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT apply("q", "red") AS G
----- UF -----------------------------------------------------------
-- Join(0)
SELECT apply("q", "red") AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT apply("q", "red") AS G

===  (q red) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT apply("q", "red") AS G
----- UF -----------------------------------------------------------
-- Join(0)
SELECT apply("q", "red") AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT apply("q", "red") AS G

===  green ======================================
 -- Join(0)
SELECT "green" AS G
===  (q green) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT apply("q", "green") AS G
----- UF -----------------------------------------------------------
-- Join(0)
SELECT apply("q", "green") AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT apply("q", "green") AS G

=== (top) (or (q red) (q green)) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT or_aggregate(G) as G
 FROM (-- Join(7)
       SELECT apply("q", "red") AS G
       UNION ALL
       -- Join(7)
       SELECT apply("q", "green") AS G)
----- UF -----------------------------------------------------------
-- Join(0)
SELECT or_(apply("q", "red"), apply("q", "green")) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT or_(apply("q", "red"), apply("q", "green")) AS G

=== (top) (or (q red) (q red)) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT or_aggregate(G) as G
 FROM (-- Join(7)
       SELECT apply("q", "red") AS G
       UNION ALL
       -- Join(7)
       SELECT apply("q", "red") AS G)
----- UF -----------------------------------------------------------
-- Join(0)
SELECT or_(apply("q", "red"), apply("q", "red")) AS G
----- G ------------------------------------------------------------
-- Join(0)
SELECT or_(apply("q", "red"), apply("q", "red")) AS G

===========================================
Tables and Views:
 - Bool (table)
 - _xmt_sort_color (table)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
