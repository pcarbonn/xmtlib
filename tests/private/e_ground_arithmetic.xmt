(set-option :backend none)
(declare-const c Int)
(assert (= 2 (+ 1 (abs 1))))
(assert (= 0 (- 3 1 2)))
(assert (= 2 (+ c (abs 1))))
(assert (= 0 (- c 1 2)))
(assert (= 4 (* 2 2 -1)))
(assert (= 2 (div 4 2)))
(assert (= 1 (mod 3 2)))

(declare-const d Real)
(assert (= 2.1 (+ 1.0 (abs 1.0))))
(assert (= 0.0 (- 3.0 1.0 2.0)))
(assert (= 2.1 (+ d (abs 1.0))))
(assert (= 0.0 (- d 1.0 2.0)))
(assert (= 4.0 (* 2.0 2.0 -1.0)))
(assert (= 2.0 (div 4.0 2.0)))
(assert (= 1.0 (mod 3 2)))

(declare-fun Row (Int) Bool)
(x-interpret-pred Row (x-range 1 8 10 10))
(x-ground :debug :sql)
(x-debug solver generators)
(x-debug db tables)
(x-debug db _xmt_interp_row_T)
------- RESULTS ------------------
(declare-const c Int)
(declare-const d Real)
(declare-fun Row (Int) Bool)
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(2, left_("+", 1, abs_(1))) AS G)
; WHERE G <> "true"(assert (= 2 (+ 1 1)))

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(0, left_("-", 3, 1, 2)) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- Join(0)
;SELECT apply("=", 2, apply("+", "c", abs_(1))) AS G(assert (= 2 (+ c 1)))

; ==== Query =============================
;-- Join(0)
;SELECT apply("=", 0, apply("-", "c", 1, 2)) AS G(assert (= 0 (- c 1 2)))

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(4, left_("*", 2, 2, -1)) AS G)
; WHERE G <> "true"(assert false)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(2, left_("div", 4, 2)) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(1, left_("mod", 3, 2)) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(2.1, left_("+", 1.0, abs_(1.0))) AS G)
; WHERE G <> "true"(assert (= 2.1 (+ 1 1)))

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(0.0, left_("-", 3.0, 1.0, 2.0)) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- Join(0)
;SELECT apply("=", 2.1, apply("+", "d", abs_(1.0))) AS G(assert (= 2.1 (+ d 1)))

; ==== Query =============================
;-- Join(0)
;SELECT apply("=", 0.0, apply("-", "d", 1.0, 2.0)) AS G(assert (= 0 (- d 1 2)))

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(4.0, left_("*", 2.0, 2.0, -1.0)) AS G)
; WHERE G <> "true"(assert false)

; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(2.0, left_("div", 4.0, 2.0)) AS G)
; WHERE G <> "true"
; ==== Query =============================
;-- exclude(0)
;SELECT *
; FROM (-- Join(7)
;       SELECT eq_(1.0, left_("mod", 3, 2)) AS G)
; WHERE G <> "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (= 2 (+ 1 (abs 1))) ======================================
TODO: generator
=== (= 0 (- 3 1 2)) ======================================
TODO: generator
=== (= 2 (+ c (abs 1))) ======================================
TODO: generator
=== (= 0 (- c 1 2)) ======================================
TODO: generator
=== (= 4 (* 2 2 -1)) ======================================
TODO: generator
=== (= 2 (div 4 2)) ======================================
TODO: generator
=== (= 1 (mod 3 2)) ======================================
TODO: generator
=== (= 2.1 (+ 1.0 (abs 1.0))) ======================================
TODO: generator
=== (= 0.0 (- 3.0 1.0 2.0)) ======================================
TODO: generator
=== (= 2.1 (+ d (abs 1.0))) ======================================
TODO: generator
=== (= 0.0 (- d 1.0 2.0)) ======================================
TODO: generator
=== (= 4.0 (* 2.0 2.0 -1.0)) ======================================
TODO: generator
=== (= 2.0 (div 4.0 2.0)) ======================================
TODO: generator
=== (= 1.0 (mod 3 2)) ======================================
TODO: generator
===========================================
Tables and Views:
 - Bool (table)
 - _xmt_interp_row_T (table)
 - _xmt_interp_row_TU (view)
 - sqlite_stat1 (table)
 - sqlite_stat4 (table)
 TABLE: _xmt_interp_row_t
┌─────┐
│ a_1 │
├─────┤
│ 1   │
├─────┤
│ 2   │
├─────┤
│ 3   │
├─────┤
│ 4   │
├─────┤
│ 5   │
├─────┤
│ 6   │
├─────┤
│ 7   │
├─────┤
│ 8   │
├─────┤
│ 10  │
└─────┘
