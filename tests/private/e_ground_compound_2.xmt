(set-option :backend none)
(declare-datatype T ( ( a ) ( b ) ))
(declare-datatype Tf ( ( A ) ( B ) ))
(declare-datatype bol ( ( TRUE ) ( FALSE )))
(declare-fun p (T Tf) bol)
(x-interpret-fun p (
   ((a A) FALSE)
   ((a B) ?)
) TRUE )

(declare-fun f (T) Tf)
(assert (forall ((x T)) (and (= (p x (f a)) TRUE) (= (p x (f b)) TRUE)) ))
(x-ground)
(x-debug solver groundings)
-------------------------
(declare-datatype T ((a ) (b )))
(declare-datatype Tf ((A ) (B )))
(declare-datatype bol ((TRUE ) (FALSE )))
(declare-fun p (T Tf) bol)
(declare-fun f (T) Tf)
(assert (and (not (= (f a) A)) (=> (= (f a) B) (= (p a B) TRUE)) (not (= (f b) A)) (=> (= (f b) B) (= (p a B) TRUE))))
Groundings:
 - x: SELECT T.G AS x, T.G AS G FROM T
 - a: SELECT "a" AS G
 - (f a): SELECT apply("f", "a") AS G
 - (p x (f a)): SELECT p_G_3.a_0 AS x, apply("=",apply("f", "a"), p_G_3.a_1) AS if_, p_G_3.G AS G FROM p_G AS p_G_3
 - TRUE: SELECT "TRUE" AS G
 - (= (p x (f a)) TRUE):
    TU: SELECT p_G_3.a_0 AS x, apply("=",apply("f", "a"), p_G_3.a_1) AS if_, eq_(p_G_3.G, "TRUE") AS G FROM p_G AS p_G_3
    UF: SELECT p_G_3.a_0 AS x, apply("=",apply("f", "a"), p_G_3.a_1) AS if_, eq_(p_G_3.G, "TRUE") AS G FROM p_G AS p_G_3
    G : SELECT p_G_3.a_0 AS x, apply("=",apply("f", "a"), p_G_3.a_1) AS if_, eq_(p_G_3.G, "TRUE") AS G FROM p_G AS p_G_3
 - b: SELECT "b" AS G
 - (f b): SELECT apply("f", "b") AS G
 - (p x (f b)): SELECT p_G_8.a_0 AS x, apply("=",apply("f", "b"), p_G_8.a_1) AS if_, p_G_8.G AS G FROM p_G AS p_G_8
 - (= (p x (f b)) TRUE):
    TU: SELECT p_G_8.a_0 AS x, apply("=",apply("f", "b"), p_G_8.a_1) AS if_, eq_(p_G_8.G, "TRUE") AS G FROM p_G AS p_G_8
    UF: SELECT p_G_8.a_0 AS x, apply("=",apply("f", "b"), p_G_8.a_1) AS if_, eq_(p_G_8.G, "TRUE") AS G FROM p_G AS p_G_8
    G : SELECT p_G_8.a_0 AS x, apply("=",apply("f", "b"), p_G_8.a_1) AS if_, eq_(p_G_8.G, "TRUE") AS G FROM p_G AS p_G_8
 - (and (= (p x (f a)) TRUE) (= (p x (f b)) TRUE)):
    TU: SELECT p_G_3.a_0 AS x, and_(apply("=",apply("f", "a"), p_G_3.a_1), apply("=",apply("f", "b"), p_G_8.a_1)) AS if_, and_(eq_(p_G_3.G, "TRUE"), eq_(p_G_8.G, "TRUE")) AS G FROM p_G AS p_G_3 JOIN p_G AS p_G_8 ON p_G_3.a_0 = p_G_8.a_0
    UF: SELECT x, and_aggregate(implies_(if_, G)) as G from (SELECT _db_4_5.x AS x, _db_4_5.if_ AS if_, _db_4_5.G AS G FROM _db_4_5 UNION SELECT _db_4_9.x AS x, _db_4_9.if_ AS if_, _db_4_9.G AS G FROM _db_4_9) GROUP BY x
    G : SELECT p_G_3.a_0 AS x, and_(apply("=",apply("f", "a"), p_G_3.a_1), apply("=",apply("f", "b"), p_G_8.a_1)) AS if_, and_(eq_(p_G_3.G, "TRUE"), eq_(p_G_8.G, "TRUE")) AS G FROM p_G AS p_G_3 JOIN p_G AS p_G_8 ON p_G_3.a_0 = p_G_8.a_0
 - (forall ((x T)) (and (= (p x (f a)) TRUE) (= (p x (f b)) TRUE))):
    TU: SELECT and_aggregate(implies_(if_, G)) as G from (SELECT p_G_3.a_0 AS x, and_(apply("=",apply("f", "a"), p_G_3.a_1), apply("=",apply("f", "b"), p_G_8.a_1)) AS if_, and_(eq_(p_G_3.G, "TRUE"), eq_(p_G_8.G, "TRUE")) AS G FROM p_G AS p_G_3 JOIN p_G AS p_G_8 ON p_G_3.a_0 = p_G_8.a_0)
    UF: SELECT G as G from (SELECT x, and_aggregate(implies_(if_, G)) as G from (SELECT _db_4_5.x AS x, _db_4_5.if_ AS if_, _db_4_5.G AS G FROM _db_4_5 UNION SELECT _db_4_9.x AS x, _db_4_9.if_ AS if_, _db_4_9.G AS G FROM _db_4_9) GROUP BY x)
    G : SELECT and_aggregate(implies_(if_, G)) as G from (SELECT p_G_3.a_0 AS x, and_(apply("=",apply("f", "a"), p_G_3.a_1), apply("=",apply("f", "b"), p_G_8.a_1)) AS if_, and_(eq_(p_G_3.G, "TRUE"), eq_(p_G_8.G, "TRUE")) AS G FROM p_G AS p_G_3 JOIN p_G AS p_G_8 ON p_G_3.a_0 = p_G_8.a_0)
