(set-option :backend none)

(declare-datatype Node (
      (n1) (n2) (n3)
))

(declare-datatype Colour ( ( yellow ) ( cyan ) (blue) (green) (red)))

(declare-fun link (Node Node) Bool)

(declare-fun colourOf (Node) Colour)

;!n1 n2 in Node: link(n1 n2) => colourOf(n1) ~= colourOf(n2).

(assert (forall ((n1 Node) (n2 Node))
            (=> (link n1 n2)
                (not (= (colourOf n1) (colourOf n2))))))

(x-interpret-pred link (x-set (n1 n2) (n2 n3)))

(x-ground)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype Node ((n1) (n2) (n3)))
(declare-datatype Colour ((yellow) (cyan) (blue) (green) (red)))
(declare-fun link (Node Node) Bool)
(declare-fun colourOf (Node) Colour)
(assert (not (= (colourOf n1) (colourOf n2))))
(assert (not (= (colourOf n2) (colourOf n3))))
Generators:
=== (and (forall ((n1 Node) (n2 Node)) (or (not (link n1 n2)) (not (= (colourOf n1) (colourOf n2)))))) ======================================
TODO: generator
===========================================
