(set-option :backend none)
(declare-datatype Node ( ( |1| ) ( |2| ) ( |3| )))
(declare-fun Edge (Node Node) Bool)
(declare-fun phi (Node Node Node) Bool)
(x-interpret-pred Edge
  (x-set
    (|1| |2|)
    (|2| |3|)
    (|1| |3|)
  )
)
(assert (forall ((x Node) (y Node) (z Node))
            (=> (and (Edge x y) (Edge y z) (Edge x z))
                (phi x y z)
            )))
(assert (forall ((x Node)) (Edge x x)))
(assert (exists ((x Node) (y Node)) (Edge x y)))
(x-ground)
(x-debug solver generators)
(check-sat)
------- RESULTS ------------------
(declare-datatype Node ((|1|) (|2|) (|3|)))
(declare-fun Edge (Node Node) Bool)
(declare-fun phi (Node Node Node) Bool)
(assert (phi |1| |2| |3|))
(assert false)
Generators:
=== (and (forall ((x Node) (y Node) (z Node)) (or (not (Edge x y)) (not (Edge y z)) (not (Edge x z)) (phi x y z))) (forall ((x Node)) (Edge x x)) (exists ((x Node) (y Node)) (Edge x y))) ======================================
TODO: generator
===========================================
(check-sat)
