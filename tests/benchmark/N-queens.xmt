(set-option :backend none)

(declare-fun Val (Int) Bool)
(x-interpret-pred Val (x-range 1 3))

(declare-fun queen (Int) Int)
(assert (forall ((v Int))
            (=> (Val v)
                (Val (queen v)))))

(assert (forall ((v1 Int) (v2 Int))
            (=> (and (Val v1) (Val v2) (< v1 v2))
                (not (= (queen v1) (queen v2))))))
(assert (forall ((v1 Int) (v2 Int))
            (=> (and (Val v1) (Val v2) (< v1 v2))
                (not (= (+ (queen v1) v1) (+ (queen v2) v2))))))
(assert (forall ((v1 Int) (v2 Int))
            (=> (and (Val v1) (Val v2) (< v1 v2))
                (not (= (- (queen v1) v1) (- (queen v2) v2))))))

(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-fun Val (Int) Bool)
(declare-fun queen (Int) Int)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_val_TU_1.a_1 AS v,
;              apply("Val", apply("queen", _xmt_interp_val_TU_1.a_1)) AS G
;         FROM _xmt_interp_val_TU AS _xmt_interp_val_TU_1)(assert (Val (queen 1)))
(assert (Val (queen 2)))
(assert (Val (queen 3)))
(assert (forall ((x0 Int)) (= (Val x0) (or 
   (= x0 1)
   (= x0 2)
   (= x0 3)
))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_val_TU_8.a_1 AS v1,
;              _xmt_interp_val_TU_11.a_1 AS v2,
;              or_(not_(compare_("<", _xmt_interp_val_TU_8.a_1, _xmt_interp_val_TU_11.a_1)), apply("not", apply("=", apply("queen", _xmt_interp_val_TU_8.a_1), apply("queen", _xmt_interp_val_TU_11.a_1)))) AS G
;         FROM _xmt_interp_val_TU AS _xmt_interp_val_TU_8
;         JOIN _xmt_interp_val_TU AS _xmt_interp_val_TU_11)(assert (not (= (queen 1) (queen 2))))
(assert (not (= (queen 1) (queen 3))))
(assert (not (= (queen 2) (queen 3))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_val_TU_8.a_1 AS v1,
;              _xmt_interp_val_TU_11.a_1 AS v2,
;              or_(not_(compare_("<", _xmt_interp_val_TU_8.a_1, _xmt_interp_val_TU_11.a_1)), apply("not", apply("=", apply("+", apply("queen", _xmt_interp_val_TU_8.a_1), _xmt_interp_val_TU_8.a_1), apply("+", apply("queen", _xmt_interp_val_TU_11.a_1), _xmt_interp_val_TU_11.a_1)))) AS G
;         FROM _xmt_interp_val_TU AS _xmt_interp_val_TU_8
;         JOIN _xmt_interp_val_TU AS _xmt_interp_val_TU_11)(assert (not (= (+ (queen 1) 1) (+ (queen 2) 2))))
(assert (not (= (+ (queen 1) 1) (+ (queen 3) 3))))
(assert (not (= (+ (queen 2) 2) (+ (queen 3) 3))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_val_TU_8.a_1 AS v1,
;              _xmt_interp_val_TU_11.a_1 AS v2,
;              or_(not_(compare_("<", _xmt_interp_val_TU_8.a_1, _xmt_interp_val_TU_11.a_1)), apply("not", apply("=", apply("-", apply("queen", _xmt_interp_val_TU_8.a_1), _xmt_interp_val_TU_8.a_1), apply("-", apply("queen", _xmt_interp_val_TU_11.a_1), _xmt_interp_val_TU_11.a_1)))) AS G
;         FROM _xmt_interp_val_TU AS _xmt_interp_val_TU_8
;         JOIN _xmt_interp_val_TU AS _xmt_interp_val_TU_11)(assert (not (= (- (queen 1) 1) (- (queen 2) 2))))
(assert (not (= (- (queen 1) 1) (- (queen 3) 3))))
(assert (not (= (- (queen 2) 2) (- (queen 3) 3))))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((v Int)) (or (not (Val v)) (Val (queen v)))) ======================================
TODO: generator
=== (forall ((v1 Int) (v2 Int)) (or (not (Val v1)) (not (Val v2)) (not (< v1 v2)) (not (= (queen v1) (queen v2))))) ======================================
TODO: generator
=== (forall ((v1 Int) (v2 Int)) (or (not (Val v1)) (not (Val v2)) (not (< v1 v2)) (not (= (+ (queen v1) v1) (+ (queen v2) v2))))) ======================================
TODO: generator
=== (forall ((v1 Int) (v2 Int)) (or (not (Val v1)) (not (Val v2)) (not (< v1 v2)) (not (= (- (queen v1) v1) (- (queen v2) v2))))) ======================================
TODO: generator
===========================================
