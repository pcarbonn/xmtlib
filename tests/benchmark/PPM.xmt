(set-option :backend none)

(declare-fun number (Int) Bool)
(x-interpret-pred number (x-range 1 3) )

(declare-fun smallnumber (Int) Bool)
(x-interpret-pred smallnumber (x-range 1 3) )

(declare-fun patternlengthf () Int)
(declare-fun pf (Int) Int)
(declare-fun solution (Int) Int)
(declare-fun solutionindex (Int) Int)
(declare-fun tf (Int) Int)

; co-domain
(assert (forall ((x Int)) (=> (smallnumber x) (number (pf x)))))
(assert (forall ((x Int)) (=> (smallnumber x) (number (solution x)))))
(assert (forall ((x Int)) (=> (smallnumber x) (number (solutionindex x)))))
(assert (forall ((x Int)) (=> (number x) (number (tf x)))))

; ! SN1, SN2 in smallnumber: (~(SN1  <  SN2) | (solutionindex(SN1)  <  solutionindex(SN2)))
(assert (forall ((SN1 Int) (SN2 Int))
            (=> (and (smallnumber SN1) (smallnumber SN2))
                (or (not (< SN1 SN2))
                    (< (solutionindex SN1) (solutionindex SN2)))
            )))

; ! SN1, N2 in smallnumber: (~(pf(SN1)  <  pf(SN2)) | (solution(SN1)  <  solution(SN2)))
(assert (forall ((SN1 Int) (SN2 Int))
            (=> (and (smallnumber SN1) (smallnumber SN2))
                (or (not (< (pf SN1) (pf SN2)))
                    (< (solution SN1) (solution SN2)))
            )))

; ! X in smallnumber, y in number: y = solutionindex(X) => (tf(y)  =  solution(X))
(assert (forall ((X Int) (y Int))
            (=> (and (smallnumber X) (smallnumber y))
                (=> (= y (solutionindex X))
                    (= (tf y) (solution X))
                ))))

(x-interpret-const patternlengthf 50)
(x-interpret-fun pf (x-mapping
    ((1) 2) ((2) 1) ((3) 3)
    ))

(x-interpret-fun tf (x-mapping
    ((1) 1) ((2) 3) ((3) 2)
    ))



(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-fun number (Int) Bool)
(declare-fun smallnumber (Int) Bool)
(declare-fun patternlengthf () Int)
(declare-fun pf (Int) Int)
(declare-fun solution (Int) Int)
(declare-fun solutionindex (Int) Int)
(declare-fun tf (Int) Int)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_smallnumber_TU_1.a_1 AS x,
;              apply("number", _xmt_interp_pf_G_3.G) AS G
;         FROM _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_1
;         JOIN _xmt_interp_pf_G AS _xmt_interp_pf_G_3
;               ON _xmt_interp_smallnumber_TU_1.a_1 = _xmt_interp_pf_G_3.a_1)(assert (number 2))
(assert (number 1))
(assert (number 3))
(assert (forall ((x0 Int)) (= (number x0) (or 
   (= x0 1)
   (= x0 2)
   (= x0 3)
))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_smallnumber_TU_1.a_1 AS x,
;              apply("number", apply("solution", _xmt_interp_smallnumber_TU_1.a_1)) AS G
;         FROM _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_1)(assert (number (solution 1)))
(assert (number (solution 2)))
(assert (number (solution 3)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_smallnumber_TU_1.a_1 AS x,
;              apply("number", apply("solutionindex", _xmt_interp_smallnumber_TU_1.a_1)) AS G
;         FROM _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_1)(assert (number (solutionindex 1)))
(assert (number (solutionindex 2)))
(assert (number (solutionindex 3)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_number_TU_15.a_1 AS x,
;              apply("number", _xmt_interp_tf_G_17.G) AS G
;         FROM _xmt_interp_number_TU AS _xmt_interp_number_TU_15
;         JOIN _xmt_interp_tf_G AS _xmt_interp_tf_G_17
;               ON _xmt_interp_number_TU_15.a_1 = _xmt_interp_tf_G_17.a_1)(assert (number 1))
(assert (number 3))
(assert (number 2))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_smallnumber_TU_22.a_1 AS SN1,
;              _xmt_interp_smallnumber_TU_25.a_1 AS SN2,
;              or_(not_(compare_("<", _xmt_interp_smallnumber_TU_22.a_1, _xmt_interp_smallnumber_TU_25.a_1)), apply("<", apply("solutionindex", _xmt_interp_smallnumber_TU_22.a_1), apply("solutionindex", _xmt_interp_smallnumber_TU_25.a_1))) AS G
;         FROM _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_22
;         JOIN _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_25)(assert (< (solutionindex 1) (solutionindex 2)))
(assert (< (solutionindex 1) (solutionindex 3)))
(assert (< (solutionindex 2) (solutionindex 3)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_smallnumber_TU_22.a_1 AS SN1,
;              _xmt_interp_smallnumber_TU_25.a_1 AS SN2,
;              or_(not_(compare_("<", _xmt_interp_pf_G_34.G, _xmt_interp_pf_G_35.G)), apply("<", apply("solution", _xmt_interp_smallnumber_TU_22.a_1), apply("solution", _xmt_interp_smallnumber_TU_25.a_1))) AS G
;         FROM _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_22
;         JOIN _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_25
;         JOIN _xmt_interp_pf_G AS _xmt_interp_pf_G_34
;               ON _xmt_interp_smallnumber_TU_22.a_1 = _xmt_interp_pf_G_34.a_1
;         JOIN _xmt_interp_pf_G AS _xmt_interp_pf_G_35
;               ON _xmt_interp_smallnumber_TU_25.a_1 = _xmt_interp_pf_G_35.a_1)(assert (< (solution 1) (solution 3)))
(assert (< (solution 2) (solution 1)))
(assert (< (solution 2) (solution 3)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_smallnumber_TU_44.a_1 AS X,
;              _xmt_interp_smallnumber_TU_47.a_1 AS y,
;              or_(apply("not", apply("=", _xmt_interp_smallnumber_TU_47.a_1, apply("solutionindex", _xmt_interp_smallnumber_TU_44.a_1))), apply("=", _xmt_interp_tf_G_52.G, apply("solution", _xmt_interp_smallnumber_TU_44.a_1))) AS G
;         FROM _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_44
;         JOIN _xmt_interp_smallnumber_TU AS _xmt_interp_smallnumber_TU_47
;         JOIN _xmt_interp_tf_G AS _xmt_interp_tf_G_52
;               ON _xmt_interp_smallnumber_TU_47.a_1 = _xmt_interp_tf_G_52.a_1)(assert (or (not (= 1 (solutionindex 1))) (= 1 (solution 1))))
(assert (or (not (= 1 (solutionindex 2))) (= 1 (solution 2))))
(assert (or (not (= 1 (solutionindex 3))) (= 1 (solution 3))))
(assert (or (not (= 2 (solutionindex 1))) (= 3 (solution 1))))
(assert (or (not (= 2 (solutionindex 2))) (= 3 (solution 2))))
(assert (or (not (= 2 (solutionindex 3))) (= 3 (solution 3))))
(assert (or (not (= 3 (solutionindex 1))) (= 2 (solution 1))))
(assert (or (not (= 3 (solutionindex 2))) (= 2 (solution 2))))
(assert (or (not (= 3 (solutionindex 3))) (= 2 (solution 3))))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((x Int)) (or (not (smallnumber x)) (number (pf x)))) ======================================
TODO: generator
=== (forall ((x Int)) (or (not (smallnumber x)) (number (solution x)))) ======================================
TODO: generator
=== (forall ((x Int)) (or (not (smallnumber x)) (number (solutionindex x)))) ======================================
TODO: generator
=== (forall ((x Int)) (or (not (number x)) (number (tf x)))) ======================================
TODO: generator
=== (forall ((SN1 Int) (SN2 Int)) (or (not (smallnumber SN1)) (not (smallnumber SN2)) (not (< SN1 SN2)) (< (solutionindex SN1) (solutionindex SN2)))) ======================================
TODO: generator
=== (forall ((SN1 Int) (SN2 Int)) (or (not (smallnumber SN1)) (not (smallnumber SN2)) (not (< (pf SN1) (pf SN2))) (< (solution SN1) (solution SN2)))) ======================================
TODO: generator
=== (forall ((X Int) (y Int)) (or (not (smallnumber X)) (not (smallnumber y)) (not (= y (solutionindex X))) (= (tf y) (solution X)))) ======================================
TODO: generator
===========================================
