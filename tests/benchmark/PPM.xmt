(set-option :backend none)

(declare-fun number (Int) Bool)
(x-interpret-pred number (x-range 1 250) )

(declare-fun smallnumber (Int) Bool)
(x-interpret-pred smallnumber (x-range 1 50) )

(declare-fun patternlengthf () Int)
; co-domain of patternlengthf
(x-interpret-const patternlengthf 50)
(assert (<= 1 patternlengthf 50))

(declare-fun pf (Int) Int)
; co-domain of pf
(assert (forall ((x Int))
            (=> (smallnumber x)
                (number (pf x))
            )))
(x-interpret-fun pf (x-mapping
((1) 44) ((2) 31) ((3) 8) ((4) 4) ((5) 43) ((6) 37) ((7) 27) ((8) 28) ((9) 12) ((10) 33) ((11) 6) ((12) 49) ((13) 25) ((14) 2) ((15) 9) ((16) 34) ((17) 46) ((18) 32) ((19) 36) ((20) 5) ((21) 50) ((22) 40) ((23) 11) ((24) 45) ((25) 16) ((26) 17) ((27) 21) ((28) 23) ((29) 24) ((30) 14) ((31) 42) ((32) 3) ((33) 41) ((34) 20) ((35) 13) ((36) 18) ((37) 38) ((38) 1) ((39) 30) ((40) 7) ((41) 48) ((42) 22) ((43) 35) ((44) 15) ((45) 19) ((46) 10) ((47) 39) ((48) 26) ((49) 29) ((50) 47) ) 0)

(declare-fun solution (Int) Int)
; co-domain of solution
(assert (forall ((x Int))
            (=> (smallnumber x)
                (number (solution x))
            )))

(declare-fun solutionindex (Int) Int)
; co-domain of solutionindex
(assert (forall ((x Int))
            (=> (smallnumber x)
                (number (solutionindex x))
            )))

(declare-fun tf (Int) Int)
; co-domain of tf
(assert (forall ((x Int))
            (=> (number x)
                (number (tf x))
            )))
(x-interpret-fun pf (x-mapping
((1) 93) ((2) 58) ((3) 13) ((4) 229) ((5) 71) ((6) 19) ((7) 132) ((8) 57) ((9) 70) ((10) 72) ((11) 195) ((12) 24) ((13) 95) ((14) 27) ((15) 143) ((16) 56) ((17) 68) ((18) 250) ((19) 122) ((20) 6) ((21) 232) ((22) 206) ((23) 240) ((24) 47) ((25) 120) ((26) 96) ((27) 99) ((28) 90) ((29) 21) ((30) 22) ((31) 145) ((32) 101) ((33) 5) ((34) 49) ((35) 114) ((36) 83) ((37) 88) ((38) 191) ((39) 193) ((40) 116) ((41) 169) ((42) 130) ((43) 156) ((44) 246) ((45) 76) ((46) 30) ((47) 171) ((48) 249) ((49) 242) ((50) 151) ((51) 103) ((52) 211) ((53) 105) ((54) 157) ((55) 37) ((56) 223) ((57) 135) ((58) 9) ((59) 192) ((60) 155) ((61) 224) ((62) 219) ((63) 161) ((64) 75) ((65) 248) ((66) 63) ((67) 160) ((68) 82) ((69) 158) ((70) 237) ((71) 128) ((72) 67) ((73) 165) ((74) 208) ((75) 40) ((76) 97) ((77) 7) ((78) 104) ((79) 119) ((80) 188) ((81) 217) ((82) 241) ((83) 14) ((84) 235) ((85) 227) ((86) 36) ((87) 212) ((88) 138) ((89) 174) ((90) 16) ((91) 61) ((92) 199) ((93) 62) ((94) 136) ((95) 54) ((96) 123) ((97) 201) ((98) 32) ((99) 175) ((100) 149) ((101) 190) ((102) 106) ((103) 117) ((104) 225) ((105) 221) ((106) 34) ((107) 209) ((108) 203) ((109) 238) ((110) 46) ((111) 162) ((112) 8) ((113) 12) ((114) 178) ((115) 247) ((116) 60) ((117) 179) ((118) 108) ((119) 121) ((120) 73) ((121) 43) ((122) 231) ((123) 147) ((124) 233) ((125) 111) ((126) 197) ((127) 11) ((128) 107) ((129) 80) ((130) 109) ((131) 164) ((132) 194) ((133) 85) ((134) 84) ((135) 78) ((136) 140) ((137) 50) ((138) 35) ((139) 163) ((140) 98) ((141) 89) ((142) 102) ((143) 115) ((144) 216) ((145) 226) ((146) 124) ((147) 86) ((148) 196) ((149) 183) ((150) 134) ((151) 200) ((152) 131) ((153) 243) ((154) 48) ((155) 81) ((156) 215) ((157) 51) ((158) 228) ((159) 144) ((160) 153) ((161) 202) ((162) 1) ((163) 55) ((164) 168) ((165) 112) ((166) 213) ((167) 180) ((168) 26) ((169) 64) ((170) 239) ((171) 207) ((172) 65) ((173) 244) ((174) 137) ((175) 186) ((176) 52) ((177) 142) ((178) 159) ((179) 129) ((180) 41) ((181) 77) ((182) 204) ((183) 29) ((184) 167) ((185) 146) ((186) 181) ((187) 154) ((188) 4) ((189) 148) ((190) 2) ((191) 23) ((192) 18) ((193) 222) ((194) 234) ((195) 3) ((196) 94) ((197) 59) ((198) 172) ((199) 198) ((200) 69) ((201) 126) ((202) 218) ((203) 38) ((204) 205) ((205) 118) ((206) 45) ((207) 176) ((208) 187) ((209) 91) ((210) 113) ((211) 184) ((212) 182) ((213) 100) ((214) 20) ((215) 15) ((216) 189) ((217) 66) ((218) 33) ((219) 10) ((220) 39) ((221) 220) ((222) 25) ((223) 79) ((224) 17) ((225) 127) ((226) 110) ((227) 236) ((228) 44) ((229) 31) ((230) 53) ((231) 230) ((232) 210) ((233) 173) ((234) 139) ((235) 133) ((236) 42) ((237) 74) ((238) 28) ((239) 92) ((240) 245) ((241) 152) ((242) 125) ((243) 177) ((244) 166) ((245) 87) ((246) 170) ((247) 150) ((248) 214) ((249) 141) ((250) 185)))

; ! SN1, SN2 in smallnumber: (~(SN1  <  SN2) | (solutionindex(SN1)  <  solutionindex(SN2)))
(assert (forall ((SN1 Int) (SN2 Int))
            (=> (and (smallnumber SN1) (smallnumber SN2))
                (or (not (< SN1 SN2))
                    (< (solutionindex SN1) (solutionindex SN2)))
            )))

; ! SN1, N2 in smallnumber: (~(pf(SN1)  <  pf(SN2)) | (solution(SN1)  <  solution(SN2))))
(assert (forall ((SN1 Int) (SN2 Int))
            (=> (and (smallnumber SN1) (smallnumber SN2))
                (or (not (< (pf SN1) (pf SN2)))
                    (< (solution SN1) (solution SN2)))
            )))

; ! X in smallnumber, y in number: y = solutionindex(X) => (tf(y)  =  solution(X))
(assert (forall ((X Int) (y Int))
            (=> (and (smallnumber X) (number y) (= y (solutionindex X)))
                (= (tf y) (solution X))
            )))

(x-ground)
(x-debug solver functions)
(x-debug solver groundings)
-------------------------
(declare-fun number (Int) Bool)
(declare-fun smallnumber (Int) Bool)
(declare-fun patternlengthf () Int)
(declare-fun pf (Int) Int)
error: at position (20, 18): Cannot interpret a symbol with infinite domain
   |
20 | (x-interpret-fun pf (x-mapping
   |                  ^ Cannot interpret a symbol with infinite domain
   |