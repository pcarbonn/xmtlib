(set-option :backend none)

(declare-datatype man (
       (m1) (m2)
))

(declare-datatype woman (
       (w1) (w2)
))

(declare-fun   manOf (woman)   man)
(declare-fun womanOf (  man) woman)

(declare-fun   manPrefers (  man woman woman) Bool)
(declare-fun womanPrefers (woman   man   man) Bool)

(declare-fun   manAssignsScore (  man woman) Int)
(declare-fun womanAssignsScore (woman   man) Int)

; !x in man: !y in woman: womanOf(x)=y <=> manOf(y)=x.
(assert (forall ((M man) (W woman))
                (= (= (womanOf M) W)
                   (= (  manOf W) M))))

; ! M in man, W in woman: ~manPrefers(M,W,womanOf(M)) | ~womanPrefers(W,M,manOf(W))
(assert (forall ((M man) (W woman))
                (or (not (  manPrefers M W (womanOf M)))
                    (not (womanPrefers W M (  manOf W))))))

; ! M in man, W in woman, W1 in woman :   manPrefers(M,W,W1) <=>   manAssignsScore(M, W) >   manAssignsScore(M, W1)
(assert (forall ((M man) (W woman) (W1 woman))
            (= (  manPrefers M W W1)
                (> (  manAssignsScore M W) (  manAssignsScore M W1)))))

; ! M in man, W in woman, M1 in   man : womanPrefers(W,M,M1) <=> womanAssignsScore(W, M) > womanAssignsScore(W, M1)
(assert (forall ((M man) (W woman) (M1 man))
            (= (womanPrefers W M M1)
                (> (womanAssignsScore W M) (womanAssignsScore W M1)))))

(x-interpret-fun   manAssignsScore (x-mapping
  ((m1 w1) 16) ((m1 w2) 8)
  ((m2 w1) 2)  ((m2 w2) 12)
))

(x-interpret-fun womanAssignsScore (x-mapping
  ((w1 m1) 16) ((w1 m2) 8)
  ((w2 m1) 2)  ((w2 m2) 12)
))

(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype man ((m1) (m2)))
(declare-datatype woman ((w1) (w2)))
(declare-fun manOf (woman) man)
(declare-fun womanOf (man) woman)
(declare-fun manPrefers (man woman woman) Bool)
(declare-fun womanPrefers (woman man man) Bool)
(declare-fun manAssignsScore (man woman) Int)
(declare-fun womanAssignsScore (woman man) Int)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_man.G AS M,
;              _xmt_sort_woman_2.G AS W,
;              apply("=", apply("=", apply("womanOf", _xmt_sort_man.G), _xmt_sort_woman_2.G), apply("=", apply("manOf", _xmt_sort_woman_2.G), _xmt_sort_man.G)) AS G
;         FROM _xmt_sort_man
;         JOIN _xmt_sort_woman AS _xmt_sort_woman_2)(assert (= (= (womanOf m1) w1) (= (manOf w1) m1)))
(assert (= (= (womanOf m1) w2) (= (manOf w2) m1)))
(assert (= (= (womanOf m2) w1) (= (manOf w1) m2)))
(assert (= (= (womanOf m2) w2) (= (manOf w2) m2)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_man.G AS M,
;              _xmt_sort_woman_2.G AS W,
;              or_(apply("not", apply("manPrefers", _xmt_sort_man.G, _xmt_sort_woman_2.G, apply("womanOf", _xmt_sort_man.G))), apply("not", apply("womanPrefers", _xmt_sort_woman_2.G, _xmt_sort_man.G, apply("manOf", _xmt_sort_woman_2.G)))) AS G
;         FROM _xmt_sort_man
;         JOIN _xmt_sort_woman AS _xmt_sort_woman_2)(assert (or (not (manPrefers m1 w1 (womanOf m1))) (not (womanPrefers w1 m1 (manOf w1)))))
(assert (or (not (manPrefers m1 w2 (womanOf m1))) (not (womanPrefers w2 m1 (manOf w2)))))
(assert (or (not (manPrefers m2 w1 (womanOf m2))) (not (womanPrefers w1 m2 (manOf w1)))))
(assert (or (not (manPrefers m2 w2 (womanOf m2))) (not (womanPrefers w2 m2 (manOf w2)))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_manassignsscore_G_16.a_1 AS M,
;              _xmt_interp_manassignsscore_G_16.a_2 AS W,
;              _xmt_interp_manassignsscore_G_17.a_2 AS W1,
;              apply("=", apply("manPrefers", _xmt_interp_manassignsscore_G_16.a_1, _xmt_interp_manassignsscore_G_16.a_2, _xmt_interp_manassignsscore_G_17.a_2), compare_(">", _xmt_interp_manassignsscore_G_16.G, _xmt_interp_manassignsscore_G_17.G)) AS G
;         FROM _xmt_interp_manassignsscore_G AS _xmt_interp_manassignsscore_G_16
;         JOIN _xmt_interp_manassignsscore_G AS _xmt_interp_manassignsscore_G_17
;               ON _xmt_interp_manassignsscore_G_16.a_1 = _xmt_interp_manassignsscore_G_17.a_1)(assert (= (manPrefers m1 w1 w1) false))
(assert (= (manPrefers m1 w1 w2) true))
(assert (= (manPrefers m1 w2 w1) false))
(assert (= (manPrefers m1 w2 w2) false))
(assert (= (manPrefers m2 w1 w1) false))
(assert (= (manPrefers m2 w1 w2) false))
(assert (= (manPrefers m2 w2 w1) true))
(assert (= (manPrefers m2 w2 w2) false))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_womanassignsscore_G_23.a_1 AS W,
;              _xmt_interp_womanassignsscore_G_23.a_2 AS M,
;              _xmt_interp_womanassignsscore_G_24.a_2 AS M1,
;              apply("=", apply("womanPrefers", _xmt_interp_womanassignsscore_G_23.a_1, _xmt_interp_womanassignsscore_G_23.a_2, _xmt_interp_womanassignsscore_G_24.a_2), compare_(">", _xmt_interp_womanassignsscore_G_23.G, _xmt_interp_womanassignsscore_G_24.G)) AS G
;         FROM _xmt_interp_womanassignsscore_G AS _xmt_interp_womanassignsscore_G_23
;         JOIN _xmt_interp_womanassignsscore_G AS _xmt_interp_womanassignsscore_G_24
;               ON _xmt_interp_womanassignsscore_G_23.a_1 = _xmt_interp_womanassignsscore_G_24.a_1)(assert (= (womanPrefers w1 m1 m1) false))
(assert (= (womanPrefers w1 m1 m2) true))
(assert (= (womanPrefers w1 m2 m1) false))
(assert (= (womanPrefers w1 m2 m2) false))
(assert (= (womanPrefers w2 m1 m1) false))
(assert (= (womanPrefers w2 m1 m2) false))
(assert (= (womanPrefers w2 m2 m1) true))
(assert (= (womanPrefers w2 m2 m2) false))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((M man) (W woman)) (= (= (womanOf M) W) (= (manOf W) M))) ======================================
TODO: generator
=== (forall ((M man) (W woman)) (or (not (manPrefers M W (womanOf M))) (not (womanPrefers W M (manOf W))))) ======================================
TODO: generator
=== (forall ((M man) (W woman) (W1 woman)) (= (manPrefers M W W1) (> (manAssignsScore M W) (manAssignsScore M W1)))) ======================================
TODO: generator
=== (forall ((M man) (W woman) (M1 man)) (= (womanPrefers W M M1) (> (womanAssignsScore W M) (womanAssignsScore W M1)))) ======================================
TODO: generator
===========================================
