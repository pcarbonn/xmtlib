(set-option :backend none)
(declare-datatype element ( (e1) (e2) (e3) (e4) (e5) (e6) (e7) (e8) ))
(declare-fun p (element) Bool)
(declare-fun q (element) Bool)
(declare-fun r (element) Bool)
(x-interpret-pred p (x-set (e1) (e5) (e7)) )
(x-interpret-pred q (x-set (e1) (e3) (e8)) )
(echo "for p+q:")
(assert (exists ((x element)) (and (p x) (q x))))

(echo "for p+r:")
(x-interpret-pred r (x-set (e3)) )
(assert (exists ((x element)) (and (p x) (r x))))
(x-ground)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype element ((e1) (e2) (e3) (e4) (e5) (e6) (e7) (e8)))
(declare-fun p (element) Bool)
(declare-fun q (element) Bool)
(declare-fun r (element) Bool)
(echo "for p+q:")
(echo "for p+r:")
(assert false)
Generators:
=== (and (exists ((x element)) (and (p x) (q x))) (exists ((x element)) (and (p x) (r x)))) ======================================
TODO: generator
===========================================
