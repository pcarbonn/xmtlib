(set-option :backend none)

(declare-fun Domain (Int) Bool)
(x-interpret-pred Domain (x-range 1 2))

(declare-fun v (Int Int) Bool)
(declare-fun state (Int Int Int) Bool)
(declare-fun assign (Int Int Int) Bool)
(declare-fun assigned (Int) Bool)

(assert (forall ((V Int))
            (=> (Domain V)
                (= (assigned V)
                   (exists ((x Int) (y Int))
                      (and (Domain x) (Domain y)
                           (assign V x y)))))))

(assert (forall ((V Int) (x1 Int) (x2 Int) (y Int))
            (=> (and (Domain V) (Domain x1) (Domain x2) (Domain y))
                (not (and (assign V x1 y) (assign V x2 y) (< x1 x2))))))

(assert (forall ((V Int) (x Int) (y1 Int) (y2 Int))
            (=> (and (Domain V) (Domain x) (Domain y1) (Domain y2))
                (not (and (assign V x y1) (assign V x y2) (< y1 y2))))))

(assert (forall ((s Int) (x Int) (y Int))
            (=> (and (Domain s) (Domain x) (Domain y))
                (not (and (state x y s) (not (assign s x y)))))))

(assert (forall ((V Int))
            (=> (Domain V)
                (not (not (assigned V))))))

(x-interpret-pred v (x-set (1 10) (2 20) ))
(x-interpret-pred state (x-set (1 1 1)))

(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-fun Domain (Int) Bool)
(declare-fun v (Int Int) Bool)
(declare-fun state (Int Int Int) Bool)
(declare-fun assign (Int Int Int) Bool)
(declare-fun assigned (Int) Bool)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_domain_TU_1.a_1 AS V,
;              _xmt_view__11_21.G AS G
;         FROM (-- Join(15)
;               SELECT Outer_0.V AS V,
;                      bool_eq_("true", Outer_0.G, Agg_10_UF.G) AS G
;                 FROM (-- Join(23)
;                       SELECT _xmt_interp_domain_TU_1.a_1 AS V,
;                              apply("assigned", _xmt_interp_domain_TU_1.a_1) AS G
;                         FROM _xmt_interp_domain_TU AS _xmt_interp_domain_TU_1
;                       ) AS Outer_0
;                 FULL JOIN (-- Agg (23)
;                       SELECT V,
;                              or_aggregate(G) as G
;                        FROM (-- Join(30)
;                              SELECT _xmt_interp_domain_TU_5.a_1 AS x,
;                                     _xmt_interp_domain_TU_7.a_1 AS y,
;                                     _xmt_interp_domain_TU_1.a_1 AS V,
;                                     apply("assign", _xmt_interp_domain_TU_1.a_1, _xmt_interp_domain_TU_5.a_1, _xmt_interp_domain_TU_7.a_1) AS G
;                                FROM _xmt_interp_domain_TU AS _xmt_interp_domain_TU_5
;                                JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_7
;                                JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_1)
;                        GROUP BY V
;                       ) AS Agg_10_UF ON  Agg_10_UF.V = Outer_0.V
;               ) AS _xmt_view__11_21
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_1
;        WHERE  _xmt_view__11_21.V = _xmt_interp_domain_TU_1.a_1)(assert (= (assigned 1) (or (assign 1 1 1) (assign 1 1 2) (assign 1 2 1) (assign 1 2 2))))
(assert (= (assigned 2) (or (assign 2 1 1) (assign 2 1 2) (assign 2 2 1) (assign 2 2 2))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_domain_TU_1.a_1 AS V,
;              _xmt_interp_domain_TU_15.a_1 AS x1,
;              _xmt_interp_domain_TU_18.a_1 AS x2,
;              _xmt_interp_domain_TU_7.a_1 AS y,
;              or_(apply("not", apply("assign", _xmt_interp_domain_TU_1.a_1, _xmt_interp_domain_TU_15.a_1, _xmt_interp_domain_TU_7.a_1)), apply("not", apply("assign", _xmt_interp_domain_TU_1.a_1, _xmt_interp_domain_TU_18.a_1, _xmt_interp_domain_TU_7.a_1)), not_(compare_("<", _xmt_interp_domain_TU_15.a_1, _xmt_interp_domain_TU_18.a_1))) AS G
;         FROM _xmt_interp_domain_TU AS _xmt_interp_domain_TU_1
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_15
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_18
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_7)(assert (or (not (assign 1 1 1)) (not (assign 1 2 1))))
(assert (or (not (assign 1 1 2)) (not (assign 1 2 2))))
(assert (or (not (assign 2 1 1)) (not (assign 2 2 1))))
(assert (or (not (assign 2 1 2)) (not (assign 2 2 2))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_domain_TU_1.a_1 AS V,
;              _xmt_interp_domain_TU_5.a_1 AS x,
;              _xmt_interp_domain_TU_31.a_1 AS y1,
;              _xmt_interp_domain_TU_34.a_1 AS y2,
;              or_(apply("not", apply("assign", _xmt_interp_domain_TU_1.a_1, _xmt_interp_domain_TU_5.a_1, _xmt_interp_domain_TU_31.a_1)), apply("not", apply("assign", _xmt_interp_domain_TU_1.a_1, _xmt_interp_domain_TU_5.a_1, _xmt_interp_domain_TU_34.a_1)), not_(compare_("<", _xmt_interp_domain_TU_31.a_1, _xmt_interp_domain_TU_34.a_1))) AS G
;         FROM _xmt_interp_domain_TU AS _xmt_interp_domain_TU_1
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_5
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_31
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_34)(assert (or (not (assign 1 1 1)) (not (assign 1 1 2))))
(assert (or (not (assign 1 2 1)) (not (assign 1 2 2))))
(assert (or (not (assign 2 1 1)) (not (assign 2 1 2))))
(assert (or (not (assign 2 2 1)) (not (assign 2 2 2))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_domain_TU_45.a_1 AS s,
;              _xmt_interp_domain_TU_5.a_1 AS x,
;              _xmt_interp_domain_TU_7.a_1 AS y,
;              apply("not", apply("not", apply("assign", _xmt_interp_domain_TU_45.a_1, _xmt_interp_domain_TU_5.a_1, _xmt_interp_domain_TU_7.a_1))) AS G
;         FROM _xmt_interp_domain_TU AS _xmt_interp_domain_TU_45
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_5
;         JOIN _xmt_interp_domain_TU AS _xmt_interp_domain_TU_7
;         JOIN _xmt_interp_state_TU AS _xmt_interp_state_TU_47
;               ON _xmt_interp_domain_TU_5.a_1 = _xmt_interp_state_TU_47.a_1 
;              AND _xmt_interp_domain_TU_7.a_1 = _xmt_interp_state_TU_47.a_2 
;              AND _xmt_interp_domain_TU_45.a_1 = _xmt_interp_state_TU_47.a_3)(assert (not (not (assign 1 1 1))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_domain_TU_1.a_1 AS V,
;              apply("not", apply("not", apply("assigned", _xmt_interp_domain_TU_1.a_1))) AS G
;         FROM _xmt_interp_domain_TU AS _xmt_interp_domain_TU_1)(assert (not (not (assigned 1))))
(assert (not (not (assigned 2))))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((V Int)) (or (not (Domain V)) (= (assigned V) (exists ((x Int) (y Int)) (and (Domain x) (Domain y) (assign V x y)))))) ======================================
TODO: generator
=== (forall ((V Int) (x1 Int) (x2 Int) (y Int)) (or (not (Domain V)) (not (Domain x1)) (not (Domain x2)) (not (Domain y)) (not (assign V x1 y)) (not (assign V x2 y)) (not (< x1 x2)))) ======================================
TODO: generator
=== (forall ((V Int) (x Int) (y1 Int) (y2 Int)) (or (not (Domain V)) (not (Domain x)) (not (Domain y1)) (not (Domain y2)) (not (assign V x y1)) (not (assign V x y2)) (not (< y1 y2)))) ======================================
TODO: generator
=== (forall ((s Int) (x Int) (y Int)) (or (not (Domain s)) (not (Domain x)) (not (Domain y)) (not (state x y s)) (not (not (assign s x y))))) ======================================
TODO: generator
=== (forall ((V Int)) (or (not (Domain V)) (not (not (assigned V))))) ======================================
TODO: generator
===========================================
