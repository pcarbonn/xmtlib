(set-option :backend none)
(declare-datatype node ( (n1) (n2) (n3) (n4) (n5) (n6) (n7) (n8) (n9)))

(declare-datatype val (
      (v1) (v2) (v3) (v4) (v5) (v6) (v7) (v8) (v9) (v10)
      (v11) (v12) (v13) (v14) (v15) (v16) (v17) (v18) (v19) (v20)
      (v21) (v22) (v23) (v24) (v25)))

(declare-fun edge (node node) Bool)
(x-interpret-pred edge (x-set (n5 n1) (n5 n9) (n4 n9) (n3 n9) (n2 n9) (n1 n9) (n5 n8) (n4 n8) (n3 n8) (n2 n8) (n1 n8) (n5 n7) (n4 n7) (n3 n7) (n2 n7) (n1 n7) (n5 n6) (n4 n6) (n3 n6) (n2 n6) (n1 n6) (n4 n5) (n3 n4) (n2 n3) (n1 n2)))

(declare-fun edge_value (node node) val)

(declare-fun value (node) val)

; TODO - !V in val: V  >  0 => (#{X, Y in node: (edge_value(X,Y)  =  V) }  =  1).

; ! N1, N2 in node: N1 ~= N2 => value(N1) ~= value(N2).
(assert (forall ((N1 node) (N2 node))
            (=> (not (= N1 N2))
                (not (= (value N1) (value N2))))))

; !x, y in node: ~edge(x, y) => edge_value(x, y) = 0.
(assert (forall ((x node) (y node))
            (=> (not (edge x y))
                (= (edge_value x y) 0))))

; !x, y in node: edge(x, y) & value(x) >= value(y) => edge_value(x, y) = value(x) - value(y).
(assert (forall ((x node) (y node))
            (=> (and (edge x y) (>= (value x) (value y)))
                (= (edge_value x y) (- (value x) (value y))))))

; !x, y in node: edge(x, y) & value(y) > value(x) => edge_value(x, y) = value(y) - value(x).
(assert (forall ((x node) (y node))
            (=> (and (edge x y) (> (value y) (value x)))
                (= (edge_value x y) (- (value y) (value x))))))

(x-ground)
(x-debug solver groundings)
------- RESULTS ------------------
(declare-datatype node ((n1) (n2) (n3) (n4) (n5) (n6) (n7) (n8) (n9)))
(declare-datatype val ((v1) (v2) (v3) (v4) (v5) (v6) (v7) (v8) (v9) (v10) (v11) (v12) (v13) (v14) (v15) (v16) (v17) (v18) (v19) (v20) (v21) (v22) (v23) (v24) (v25)))
(declare-fun edge (node node) Bool)
(assert (forall ((x0 node) (x1 node)) (= (edge x0 x1) (or 
  (and (= x0 n5) (= x1 n1))
  (and (= x0 n5) (= x1 n9))
  (and (= x0 n4) (= x1 n9))
  (and (= x0 n3) (= x1 n9))
  (and (= x0 n2) (= x1 n9))
  (and (= x0 n1) (= x1 n9))
  (and (= x0 n5) (= x1 n8))
  (and (= x0 n4) (= x1 n8))
  (and (= x0 n3) (= x1 n8))
  (and (= x0 n2) (= x1 n8))
  (and (= x0 n1) (= x1 n8))
  (and (= x0 n5) (= x1 n7))
  (and (= x0 n4) (= x1 n7))
  (and (= x0 n3) (= x1 n7))
  (and (= x0 n2) (= x1 n7))
  (and (= x0 n1) (= x1 n7))
  (and (= x0 n5) (= x1 n6))
  (and (= x0 n4) (= x1 n6))
  (and (= x0 n3) (= x1 n6))
  (and (= x0 n2) (= x1 n6))
  (and (= x0 n1) (= x1 n6))
  (and (= x0 n4) (= x1 n5))
  (and (= x0 n3) (= x1 n4))
  (and (= x0 n2) (= x1 n3))
  (and (= x0 n1) (= x1 n2))
))))
(declare-fun edge_value (node node) val)
(declare-fun value (node) val)
(assert (forall ((N1 node) (N2 node)) (or (not (not (= N1 N2))) (not (= (value N1) (value N2))))))
(assert (= (edge_value n1 n1) 0))
(assert (= (edge_value n1 n3) 0))
(assert (= (edge_value n1 n4) 0))
(assert (= (edge_value n1 n5) 0))
(assert (= (edge_value n2 n1) 0))
(assert (= (edge_value n2 n2) 0))
(assert (= (edge_value n2 n4) 0))
(assert (= (edge_value n2 n5) 0))
(assert (= (edge_value n3 n1) 0))
(assert (= (edge_value n3 n2) 0))
(assert (= (edge_value n3 n3) 0))
(assert (= (edge_value n3 n5) 0))
(assert (= (edge_value n4 n1) 0))
(assert (= (edge_value n4 n2) 0))
(assert (= (edge_value n4 n3) 0))
(assert (= (edge_value n4 n4) 0))
(assert (= (edge_value n5 n2) 0))
(assert (= (edge_value n5 n3) 0))
(assert (= (edge_value n5 n4) 0))
(assert (= (edge_value n5 n5) 0))
(assert (= (edge_value n6 n1) 0))
(assert (= (edge_value n6 n2) 0))
(assert (= (edge_value n6 n3) 0))
(assert (= (edge_value n6 n4) 0))
(assert (= (edge_value n6 n5) 0))
(assert (= (edge_value n6 n6) 0))
(assert (= (edge_value n6 n7) 0))
(assert (= (edge_value n6 n8) 0))
(assert (= (edge_value n6 n9) 0))
(assert (= (edge_value n7 n1) 0))
(assert (= (edge_value n7 n2) 0))
(assert (= (edge_value n7 n3) 0))
(assert (= (edge_value n7 n4) 0))
(assert (= (edge_value n7 n5) 0))
(assert (= (edge_value n7 n6) 0))
(assert (= (edge_value n7 n7) 0))
(assert (= (edge_value n7 n8) 0))
(assert (= (edge_value n7 n9) 0))
(assert (= (edge_value n8 n1) 0))
(assert (= (edge_value n8 n2) 0))
(assert (= (edge_value n8 n3) 0))
(assert (= (edge_value n8 n4) 0))
(assert (= (edge_value n8 n5) 0))
(assert (= (edge_value n8 n6) 0))
(assert (= (edge_value n8 n7) 0))
(assert (= (edge_value n8 n8) 0))
(assert (= (edge_value n8 n9) 0))
(assert (= (edge_value n9 n1) 0))
(assert (= (edge_value n9 n2) 0))
(assert (= (edge_value n9 n3) 0))
(assert (= (edge_value n9 n4) 0))
(assert (= (edge_value n9 n5) 0))
(assert (= (edge_value n9 n6) 0))
(assert (= (edge_value n9 n7) 0))
(assert (= (edge_value n9 n8) 0))
(assert (= (edge_value n9 n9) 0))
(assert (or (not (>= (value n5) (value n1))) (= (edge_value n5 n1) (- (value n5) (value n1)))))
(assert (or (not (>= (value n5) (value n9))) (= (edge_value n5 n9) (- (value n5) (value n9)))))
(assert (or (not (>= (value n4) (value n9))) (= (edge_value n4 n9) (- (value n4) (value n9)))))
(assert (or (not (>= (value n3) (value n9))) (= (edge_value n3 n9) (- (value n3) (value n9)))))
(assert (or (not (>= (value n2) (value n9))) (= (edge_value n2 n9) (- (value n2) (value n9)))))
(assert (or (not (>= (value n1) (value n9))) (= (edge_value n1 n9) (- (value n1) (value n9)))))
(assert (or (not (>= (value n5) (value n8))) (= (edge_value n5 n8) (- (value n5) (value n8)))))
(assert (or (not (>= (value n4) (value n8))) (= (edge_value n4 n8) (- (value n4) (value n8)))))
(assert (or (not (>= (value n3) (value n8))) (= (edge_value n3 n8) (- (value n3) (value n8)))))
(assert (or (not (>= (value n2) (value n8))) (= (edge_value n2 n8) (- (value n2) (value n8)))))
(assert (or (not (>= (value n1) (value n8))) (= (edge_value n1 n8) (- (value n1) (value n8)))))
(assert (or (not (>= (value n5) (value n7))) (= (edge_value n5 n7) (- (value n5) (value n7)))))
(assert (or (not (>= (value n4) (value n7))) (= (edge_value n4 n7) (- (value n4) (value n7)))))
(assert (or (not (>= (value n3) (value n7))) (= (edge_value n3 n7) (- (value n3) (value n7)))))
(assert (or (not (>= (value n2) (value n7))) (= (edge_value n2 n7) (- (value n2) (value n7)))))
(assert (or (not (>= (value n1) (value n7))) (= (edge_value n1 n7) (- (value n1) (value n7)))))
(assert (or (not (>= (value n5) (value n6))) (= (edge_value n5 n6) (- (value n5) (value n6)))))
(assert (or (not (>= (value n4) (value n6))) (= (edge_value n4 n6) (- (value n4) (value n6)))))
(assert (or (not (>= (value n3) (value n6))) (= (edge_value n3 n6) (- (value n3) (value n6)))))
(assert (or (not (>= (value n2) (value n6))) (= (edge_value n2 n6) (- (value n2) (value n6)))))
(assert (or (not (>= (value n1) (value n6))) (= (edge_value n1 n6) (- (value n1) (value n6)))))
(assert (or (not (>= (value n4) (value n5))) (= (edge_value n4 n5) (- (value n4) (value n5)))))
(assert (or (not (>= (value n3) (value n4))) (= (edge_value n3 n4) (- (value n3) (value n4)))))
(assert (or (not (>= (value n2) (value n3))) (= (edge_value n2 n3) (- (value n2) (value n3)))))
(assert (or (not (>= (value n1) (value n2))) (= (edge_value n1 n2) (- (value n1) (value n2)))))
(assert (or (not (> (value n1) (value n5))) (= (edge_value n5 n1) (- (value n1) (value n5)))))
(assert (or (not (> (value n9) (value n5))) (= (edge_value n5 n9) (- (value n9) (value n5)))))
(assert (or (not (> (value n9) (value n4))) (= (edge_value n4 n9) (- (value n9) (value n4)))))
(assert (or (not (> (value n9) (value n3))) (= (edge_value n3 n9) (- (value n9) (value n3)))))
(assert (or (not (> (value n9) (value n2))) (= (edge_value n2 n9) (- (value n9) (value n2)))))
(assert (or (not (> (value n9) (value n1))) (= (edge_value n1 n9) (- (value n9) (value n1)))))
(assert (or (not (> (value n8) (value n5))) (= (edge_value n5 n8) (- (value n8) (value n5)))))
(assert (or (not (> (value n8) (value n4))) (= (edge_value n4 n8) (- (value n8) (value n4)))))
(assert (or (not (> (value n8) (value n3))) (= (edge_value n3 n8) (- (value n8) (value n3)))))
(assert (or (not (> (value n8) (value n2))) (= (edge_value n2 n8) (- (value n8) (value n2)))))
(assert (or (not (> (value n8) (value n1))) (= (edge_value n1 n8) (- (value n8) (value n1)))))
(assert (or (not (> (value n7) (value n5))) (= (edge_value n5 n7) (- (value n7) (value n5)))))
(assert (or (not (> (value n7) (value n4))) (= (edge_value n4 n7) (- (value n7) (value n4)))))
(assert (or (not (> (value n7) (value n3))) (= (edge_value n3 n7) (- (value n7) (value n3)))))
(assert (or (not (> (value n7) (value n2))) (= (edge_value n2 n7) (- (value n7) (value n2)))))
(assert (or (not (> (value n7) (value n1))) (= (edge_value n1 n7) (- (value n7) (value n1)))))
(assert (or (not (> (value n6) (value n5))) (= (edge_value n5 n6) (- (value n6) (value n5)))))
(assert (or (not (> (value n6) (value n4))) (= (edge_value n4 n6) (- (value n6) (value n4)))))
(assert (or (not (> (value n6) (value n3))) (= (edge_value n3 n6) (- (value n6) (value n3)))))
(assert (or (not (> (value n6) (value n2))) (= (edge_value n2 n6) (- (value n6) (value n2)))))
(assert (or (not (> (value n6) (value n1))) (= (edge_value n1 n6) (- (value n6) (value n1)))))
(assert (or (not (> (value n5) (value n4))) (= (edge_value n4 n5) (- (value n5) (value n4)))))
(assert (or (not (> (value n4) (value n3))) (= (edge_value n3 n4) (- (value n4) (value n3)))))
(assert (or (not (> (value n3) (value n2))) (= (edge_value n2 n3) (- (value n3) (value n2)))))
(assert (or (not (> (value n2) (value n1))) (= (edge_value n1 n2) (- (value n2) (value n1)))))
Groundings:
===  x ======================================
 -- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node.G AS G
  FROM _xmt_sort_node
===  y ======================================
 -- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node_1.G AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
===  (edge x y) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_TU_2.a_1 AS x,
       _xmt_interp_edge_TU_2.a_2 AS y,
       "true" AS G
  FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_UF_2.a_1 AS x,
       _xmt_interp_edge_UF_2.a_2 AS y,
       "false" AS G
  FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_G_2.a_1 AS x,
       _xmt_interp_edge_G_2.a_2 AS y,
       _xmt_interp_edge_G_2.G AS G
  FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_2

===  (not (edge x y)) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_UF_2.a_1 AS x,
       _xmt_interp_edge_UF_2.a_2 AS y,
       "true" AS G
  FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_TU_2.a_1 AS x,
       _xmt_interp_edge_TU_2.a_2 AS y,
       "false" AS G
  FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_G_2.a_1 AS x,
       _xmt_interp_edge_G_2.a_2 AS y,
       not_(_xmt_interp_edge_G_2.G) AS G
  FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_2

===  (not (not (edge x y))) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_TU_2.a_1 AS x,
       _xmt_interp_edge_TU_2.a_2 AS y,
       "true" AS G
  FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_UF_2.a_1 AS x,
       _xmt_interp_edge_UF_2.a_2 AS y,
       "false" AS G
  FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_G_2.a_1 AS x,
       _xmt_interp_edge_G_2.a_2 AS y,
       not_(not_(_xmt_interp_edge_G_2.G)) AS G
  FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_2

===  (edge_value x y) ======================================
 -- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
===  0 ======================================
 -- Join(0)
SELECT 0 AS G
===  (= (edge_value x y) 0) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), 0) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), 0) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), 0) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1

===  (or (not (not (edge x y))) (= (edge_value x y) 0)) ======================================
----- T ------------------------------------------------------------
-- Agg (0)
SELECT x, y,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                     _xmt_interp_edge_TU_2.a_2 AS y,
                     "true" AS G
                FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2
              UNION ALL
              -- Join(14)
              SELECT _xmt_sort_node.G AS x,
                     _xmt_sort_node_1.G AS y,
                     apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), 0) AS G
                FROM _xmt_sort_node
                JOIN _xmt_sort_node AS _xmt_sort_node_1)
        WHERE G <> "false")
 GROUP BY x, y
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_UF_2.a_1 AS x,
       _xmt_interp_edge_UF_2.a_2 AS y,
       apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
  FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_G_2.a_1 AS x,
       _xmt_interp_edge_G_2.a_2 AS y,
       or_(not_(not_(_xmt_interp_edge_G_2.G)), apply("=", apply("edge_value", _xmt_interp_edge_G_2.a_1, _xmt_interp_edge_G_2.a_2), 0)) AS G
  FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_2

=== (top) (forall ((x node) (y node)) (or (not (not (edge x y))) (= (edge_value x y) 0))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- Join(7)
       SELECT _xmt_interp_edge_UF_2.a_1 AS x,
              _xmt_interp_edge_UF_2.a_2 AS y,
              apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
         FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2)
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- Join(7)
       SELECT _xmt_interp_edge_UF_2.a_1 AS x,
              _xmt_interp_edge_UF_2.a_2 AS y,
              apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
         FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2)
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- Join(7)
       SELECT _xmt_interp_edge_UF_2.a_1 AS x,
              _xmt_interp_edge_UF_2.a_2 AS y,
              apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
         FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2)

===  (value x) ======================================
 -- Join(0)
SELECT _xmt_sort_node.G AS x,
       apply("value", _xmt_sort_node.G) AS G
  FROM _xmt_sort_node
===  (value y) ======================================
 -- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       apply("value", _xmt_sort_node_1.G) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
===  (>= (value x) (value y)) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G)) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G)) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G)) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1

===  (not (>= (value x) (value y))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("not", apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("not", apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("not", apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1

===  (- (value x) (value y)) ======================================
 -- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("-", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G)) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
===  (= (edge_value x y) (- (value x) (value y))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1

===  (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y)))) ======================================
----- T ------------------------------------------------------------
-- Agg (0)
SELECT x, y,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_interp_edge_UF_2.a_1 AS x,
                     _xmt_interp_edge_UF_2.a_2 AS y,
                     "true" AS G
                FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2
              UNION ALL
              -- Join(14)
              SELECT _xmt_sort_node.G AS x,
                     _xmt_sort_node_1.G AS y,
                     apply("not", apply(">=", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
                FROM _xmt_sort_node
                JOIN _xmt_sort_node AS _xmt_sort_node_1
              UNION ALL
              -- Join(14)
              SELECT _xmt_sort_node.G AS x,
                     _xmt_sort_node_1.G AS y,
                     apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node.G), apply("value", _xmt_sort_node_1.G))) AS G
                FROM _xmt_sort_node
                JOIN _xmt_sort_node AS _xmt_sort_node_1)
        WHERE G <> "false")
 GROUP BY x, y
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_TU_2.a_1 AS x,
       _xmt_interp_edge_TU_2.a_2 AS y,
       or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
  FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_G_2.a_1 AS x,
       _xmt_interp_edge_G_2.a_2 AS y,
       or_(not_(_xmt_interp_edge_G_2.G), apply("not", apply(">=", apply("value", _xmt_interp_edge_G_2.a_1), apply("value", _xmt_interp_edge_G_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_G_2.a_1, _xmt_interp_edge_G_2.a_2), apply("-", apply("value", _xmt_interp_edge_G_2.a_1), apply("value", _xmt_interp_edge_G_2.a_2)))) AS G
  FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_2

=== (top) (forall ((x node) (y node)) (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y))))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- Join(7)
       SELECT _xmt_interp_edge_TU_2.a_1 AS x,
              _xmt_interp_edge_TU_2.a_2 AS y,
              or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
         FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- Join(7)
       SELECT _xmt_interp_edge_TU_2.a_1 AS x,
              _xmt_interp_edge_TU_2.a_2 AS y,
              or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
         FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- Join(7)
       SELECT _xmt_interp_edge_TU_2.a_1 AS x,
              _xmt_interp_edge_TU_2.a_2 AS y,
              or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
         FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)

===  (> (value y) (value x)) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G)) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G)) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G)) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node

===  (not (> (value y) (value x))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply("not", apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply("not", apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply("not", apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node

===  (- (value y) (value x)) ======================================
 -- Join(0)
SELECT _xmt_sort_node_1.G AS y,
       _xmt_sort_node.G AS x,
       apply("-", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G)) AS G
  FROM _xmt_sort_node AS _xmt_sort_node_1
  JOIN _xmt_sort_node
===  (= (edge_value x y) (- (value y) (value x))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_sort_node.G AS x,
       _xmt_sort_node_1.G AS y,
       apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
  FROM _xmt_sort_node
  JOIN _xmt_sort_node AS _xmt_sort_node_1

===  (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x)))) ======================================
----- T ------------------------------------------------------------
-- Agg (0)
SELECT x, y,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_interp_edge_UF_2.a_1 AS x,
                     _xmt_interp_edge_UF_2.a_2 AS y,
                     "true" AS G
                FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2
              UNION ALL
              -- Join(14)
              SELECT _xmt_sort_node_1.G AS y,
                     _xmt_sort_node.G AS x,
                     apply("not", apply(">", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
                FROM _xmt_sort_node AS _xmt_sort_node_1
                JOIN _xmt_sort_node
              UNION ALL
              -- Join(14)
              SELECT _xmt_sort_node.G AS x,
                     _xmt_sort_node_1.G AS y,
                     apply("=", apply("edge_value", _xmt_sort_node.G, _xmt_sort_node_1.G), apply("-", apply("value", _xmt_sort_node_1.G), apply("value", _xmt_sort_node.G))) AS G
                FROM _xmt_sort_node
                JOIN _xmt_sort_node AS _xmt_sort_node_1)
        WHERE G <> "false")
 GROUP BY x, y
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_TU_2.a_1 AS x,
       _xmt_interp_edge_TU_2.a_2 AS y,
       or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
  FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_interp_edge_G_2.a_1 AS x,
       _xmt_interp_edge_G_2.a_2 AS y,
       or_(not_(_xmt_interp_edge_G_2.G), apply("not", apply(">", apply("value", _xmt_interp_edge_G_2.a_2), apply("value", _xmt_interp_edge_G_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_G_2.a_1, _xmt_interp_edge_G_2.a_2), apply("-", apply("value", _xmt_interp_edge_G_2.a_2), apply("value", _xmt_interp_edge_G_2.a_1)))) AS G
  FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_2

=== (top) (forall ((x node) (y node)) (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x))))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- Join(7)
       SELECT _xmt_interp_edge_TU_2.a_1 AS x,
              _xmt_interp_edge_TU_2.a_2 AS y,
              or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
         FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- Join(7)
       SELECT _xmt_interp_edge_TU_2.a_1 AS x,
              _xmt_interp_edge_TU_2.a_2 AS y,
              or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
         FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- Join(7)
       SELECT _xmt_interp_edge_TU_2.a_1 AS x,
              _xmt_interp_edge_TU_2.a_2 AS y,
              or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
         FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)

=== (top) (and (forall ((x node) (y node)) (or (not (not (edge x y))) (= (edge_value x y) 0))) (forall ((x node) (y node)) (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y))))) (forall ((x node) (y node)) (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x)))))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT and_(Agg_9_TU.G, Agg_17_TU.G, Agg_23_TU.G) AS G
  FROM (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- Join(15)
               SELECT _xmt_interp_edge_UF_2.a_1 AS x,
                      _xmt_interp_edge_UF_2.a_2 AS y,
                      apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
                 FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2)
        ) AS Agg_9_TU
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- Join(15)
               SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                      _xmt_interp_edge_TU_2.a_2 AS y,
                      or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
                 FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
        ) AS Agg_17_TU
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- Join(15)
               SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                      _xmt_interp_edge_TU_2.a_2 AS y,
                      or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
                 FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
        ) AS Agg_23_TU
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- Agg (7)
       SELECT G as G
        FROM (-- Join(14)
              SELECT _xmt_interp_edge_UF_2.a_1 AS x,
                     _xmt_interp_edge_UF_2.a_2 AS y,
                     apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
                FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2)
       UNION ALL
       -- Agg (7)
       SELECT G as G
        FROM (-- Join(14)
              SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                     _xmt_interp_edge_TU_2.a_2 AS y,
                     or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
                FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
       UNION ALL
       -- Agg (7)
       SELECT G as G
        FROM (-- Join(14)
              SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                     _xmt_interp_edge_TU_2.a_2 AS y,
                     or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
                FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2))
----- G ------------------------------------------------------------
-- Join(0)
SELECT and_(Agg_9_G.G, Agg_17_G.G, Agg_23_G.G) AS G
  FROM (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- Join(15)
               SELECT _xmt_interp_edge_UF_2.a_1 AS x,
                      _xmt_interp_edge_UF_2.a_2 AS y,
                      apply("=", apply("edge_value", _xmt_interp_edge_UF_2.a_1, _xmt_interp_edge_UF_2.a_2), 0) AS G
                 FROM _xmt_interp_edge_UF AS _xmt_interp_edge_UF_2)
        ) AS Agg_9_G
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- Join(15)
               SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                      _xmt_interp_edge_TU_2.a_2 AS y,
                      or_(apply("not", apply(">=", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_1), apply("value", _xmt_interp_edge_TU_2.a_2)))) AS G
                 FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
        ) AS Agg_17_G
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- Join(15)
               SELECT _xmt_interp_edge_TU_2.a_1 AS x,
                      _xmt_interp_edge_TU_2.a_2 AS y,
                      or_(apply("not", apply(">", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1))), apply("=", apply("edge_value", _xmt_interp_edge_TU_2.a_1, _xmt_interp_edge_TU_2.a_2), apply("-", apply("value", _xmt_interp_edge_TU_2.a_2), apply("value", _xmt_interp_edge_TU_2.a_1)))) AS G
                 FROM _xmt_interp_edge_TU AS _xmt_interp_edge_TU_2)
        ) AS Agg_23_G

===========================================
