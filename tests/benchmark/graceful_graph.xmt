(set-option :backend none)
(declare-datatype node ( (n1) (n2) (n3) (n4) (n5) (n6) (n7) (n8) (n9)))

(declare-datatype val (
      (v1) (v2) (v3) (v4) (v5) (v6) (v7) (v8) (v9) (v10)
      (v11) (v12) (v13) (v14) (v15) (v16) (v17) (v18) (v19) (v20)
      (v21) (v22) (v23) (v24) (v25)))

(declare-fun edge (node node) Bool)
(x-interpret-pred edge (x-set (n5 n1) (n5 n9) (n4 n9) (n3 n9) (n2 n9) (n1 n9) (n5 n8) (n4 n8) (n3 n8) (n2 n8) (n1 n8) (n5 n7) (n4 n7) (n3 n7) (n2 n7) (n1 n7) (n5 n6) (n4 n6) (n3 n6) (n2 n6) (n1 n6) (n4 n5) (n3 n4) (n2 n3) (n1 n2)))

(declare-fun edge_value (node node) val)

(declare-fun value (node) val)

; TODO - !V in val: V  >  0 => (#{X, Y in node: (edge_value(X,Y)  =  V) }  =  1).

; ! N1, N2 in node: N1 ~= N2 => value(N1) ~= value(N2).
(assert (forall ((N1 node) (N2 node))
            (=> (not (= N1 N2))
                (not (= (value N1) (value N2))))))

; !x, y in node: ~edge(x, y) => edge_value(x, y) = 0.
(assert (forall ((x node) (y node))
            (=> (not (edge x y))
                (= (edge_value x y) 0))))

; !x, y in node: edge(x, y) & value(x) >= value(y) => edge_value(x, y) = value(x) - value(y).
(assert (forall ((x node) (y node))
            (=> (and (edge x y) (>= (value x) (value y)))
                (= (edge_value x y) (- (value x) (value y))))))

; !x, y in node: edge(x, y) & value(y) > value(x) => edge_value(x, y) = value(y) - value(x).
(assert (forall ((x node) (y node))
            (=> (and (edge x y) (> (value y) (value x)))
                (= (edge_value x y) (- (value y) (value x))))))

(x-ground)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype node ((n1) (n2) (n3) (n4) (n5) (n6) (n7) (n8) (n9)))
(declare-datatype val ((v1) (v2) (v3) (v4) (v5) (v6) (v7) (v8) (v9) (v10) (v11) (v12) (v13) (v14) (v15) (v16) (v17) (v18) (v19) (v20) (v21) (v22) (v23) (v24) (v25)))
(declare-fun edge (node node) Bool)
(declare-fun edge_value (node node) val)
(declare-fun value (node) val)
(assert (forall ((N1 node) (N2 node)) (or (not (not (= N1 N2))) (not (= (value N1) (value N2))))))
(assert (= (edge_value n1 n1) 0))
(assert (= (edge_value n1 n3) 0))
(assert (= (edge_value n1 n4) 0))
(assert (= (edge_value n1 n5) 0))
(assert (= (edge_value n2 n1) 0))
(assert (= (edge_value n2 n2) 0))
(assert (= (edge_value n2 n4) 0))
(assert (= (edge_value n2 n5) 0))
(assert (= (edge_value n3 n1) 0))
(assert (= (edge_value n3 n2) 0))
(assert (= (edge_value n3 n3) 0))
(assert (= (edge_value n3 n5) 0))
(assert (= (edge_value n4 n1) 0))
(assert (= (edge_value n4 n2) 0))
(assert (= (edge_value n4 n3) 0))
(assert (= (edge_value n4 n4) 0))
(assert (= (edge_value n5 n2) 0))
(assert (= (edge_value n5 n3) 0))
(assert (= (edge_value n5 n4) 0))
(assert (= (edge_value n5 n5) 0))
(assert (= (edge_value n6 n1) 0))
(assert (= (edge_value n6 n2) 0))
(assert (= (edge_value n6 n3) 0))
(assert (= (edge_value n6 n4) 0))
(assert (= (edge_value n6 n5) 0))
(assert (= (edge_value n6 n6) 0))
(assert (= (edge_value n6 n7) 0))
(assert (= (edge_value n6 n8) 0))
(assert (= (edge_value n6 n9) 0))
(assert (= (edge_value n7 n1) 0))
(assert (= (edge_value n7 n2) 0))
(assert (= (edge_value n7 n3) 0))
(assert (= (edge_value n7 n4) 0))
(assert (= (edge_value n7 n5) 0))
(assert (= (edge_value n7 n6) 0))
(assert (= (edge_value n7 n7) 0))
(assert (= (edge_value n7 n8) 0))
(assert (= (edge_value n7 n9) 0))
(assert (= (edge_value n8 n1) 0))
(assert (= (edge_value n8 n2) 0))
(assert (= (edge_value n8 n3) 0))
(assert (= (edge_value n8 n4) 0))
(assert (= (edge_value n8 n5) 0))
(assert (= (edge_value n8 n6) 0))
(assert (= (edge_value n8 n7) 0))
(assert (= (edge_value n8 n8) 0))
(assert (= (edge_value n8 n9) 0))
(assert (= (edge_value n9 n1) 0))
(assert (= (edge_value n9 n2) 0))
(assert (= (edge_value n9 n3) 0))
(assert (= (edge_value n9 n4) 0))
(assert (= (edge_value n9 n5) 0))
(assert (= (edge_value n9 n6) 0))
(assert (= (edge_value n9 n7) 0))
(assert (= (edge_value n9 n8) 0))
(assert (= (edge_value n9 n9) 0))
(assert (or (not (>= (value n5) (value n1))) (= (edge_value n5 n1) (- (value n5) (value n1)))))
(assert (or (not (>= (value n5) (value n9))) (= (edge_value n5 n9) (- (value n5) (value n9)))))
(assert (or (not (>= (value n4) (value n9))) (= (edge_value n4 n9) (- (value n4) (value n9)))))
(assert (or (not (>= (value n3) (value n9))) (= (edge_value n3 n9) (- (value n3) (value n9)))))
(assert (or (not (>= (value n2) (value n9))) (= (edge_value n2 n9) (- (value n2) (value n9)))))
(assert (or (not (>= (value n1) (value n9))) (= (edge_value n1 n9) (- (value n1) (value n9)))))
(assert (or (not (>= (value n5) (value n8))) (= (edge_value n5 n8) (- (value n5) (value n8)))))
(assert (or (not (>= (value n4) (value n8))) (= (edge_value n4 n8) (- (value n4) (value n8)))))
(assert (or (not (>= (value n3) (value n8))) (= (edge_value n3 n8) (- (value n3) (value n8)))))
(assert (or (not (>= (value n2) (value n8))) (= (edge_value n2 n8) (- (value n2) (value n8)))))
(assert (or (not (>= (value n1) (value n8))) (= (edge_value n1 n8) (- (value n1) (value n8)))))
(assert (or (not (>= (value n5) (value n7))) (= (edge_value n5 n7) (- (value n5) (value n7)))))
(assert (or (not (>= (value n4) (value n7))) (= (edge_value n4 n7) (- (value n4) (value n7)))))
(assert (or (not (>= (value n3) (value n7))) (= (edge_value n3 n7) (- (value n3) (value n7)))))
(assert (or (not (>= (value n2) (value n7))) (= (edge_value n2 n7) (- (value n2) (value n7)))))
(assert (or (not (>= (value n1) (value n7))) (= (edge_value n1 n7) (- (value n1) (value n7)))))
(assert (or (not (>= (value n5) (value n6))) (= (edge_value n5 n6) (- (value n5) (value n6)))))
(assert (or (not (>= (value n4) (value n6))) (= (edge_value n4 n6) (- (value n4) (value n6)))))
(assert (or (not (>= (value n3) (value n6))) (= (edge_value n3 n6) (- (value n3) (value n6)))))
(assert (or (not (>= (value n2) (value n6))) (= (edge_value n2 n6) (- (value n2) (value n6)))))
(assert (or (not (>= (value n1) (value n6))) (= (edge_value n1 n6) (- (value n1) (value n6)))))
(assert (or (not (>= (value n4) (value n5))) (= (edge_value n4 n5) (- (value n4) (value n5)))))
(assert (or (not (>= (value n3) (value n4))) (= (edge_value n3 n4) (- (value n3) (value n4)))))
(assert (or (not (>= (value n2) (value n3))) (= (edge_value n2 n3) (- (value n2) (value n3)))))
(assert (or (not (>= (value n1) (value n2))) (= (edge_value n1 n2) (- (value n1) (value n2)))))
(assert (or (not (> (value n1) (value n5))) (= (edge_value n5 n1) (- (value n1) (value n5)))))
(assert (or (not (> (value n9) (value n5))) (= (edge_value n5 n9) (- (value n9) (value n5)))))
(assert (or (not (> (value n9) (value n4))) (= (edge_value n4 n9) (- (value n9) (value n4)))))
(assert (or (not (> (value n9) (value n3))) (= (edge_value n3 n9) (- (value n9) (value n3)))))
(assert (or (not (> (value n9) (value n2))) (= (edge_value n2 n9) (- (value n9) (value n2)))))
(assert (or (not (> (value n9) (value n1))) (= (edge_value n1 n9) (- (value n9) (value n1)))))
(assert (or (not (> (value n8) (value n5))) (= (edge_value n5 n8) (- (value n8) (value n5)))))
(assert (or (not (> (value n8) (value n4))) (= (edge_value n4 n8) (- (value n8) (value n4)))))
(assert (or (not (> (value n8) (value n3))) (= (edge_value n3 n8) (- (value n8) (value n3)))))
(assert (or (not (> (value n8) (value n2))) (= (edge_value n2 n8) (- (value n8) (value n2)))))
(assert (or (not (> (value n8) (value n1))) (= (edge_value n1 n8) (- (value n8) (value n1)))))
(assert (or (not (> (value n7) (value n5))) (= (edge_value n5 n7) (- (value n7) (value n5)))))
(assert (or (not (> (value n7) (value n4))) (= (edge_value n4 n7) (- (value n7) (value n4)))))
(assert (or (not (> (value n7) (value n3))) (= (edge_value n3 n7) (- (value n7) (value n3)))))
(assert (or (not (> (value n7) (value n2))) (= (edge_value n2 n7) (- (value n7) (value n2)))))
(assert (or (not (> (value n7) (value n1))) (= (edge_value n1 n7) (- (value n7) (value n1)))))
(assert (or (not (> (value n6) (value n5))) (= (edge_value n5 n6) (- (value n6) (value n5)))))
(assert (or (not (> (value n6) (value n4))) (= (edge_value n4 n6) (- (value n6) (value n4)))))
(assert (or (not (> (value n6) (value n3))) (= (edge_value n3 n6) (- (value n6) (value n3)))))
(assert (or (not (> (value n6) (value n2))) (= (edge_value n2 n6) (- (value n6) (value n2)))))
(assert (or (not (> (value n6) (value n1))) (= (edge_value n1 n6) (- (value n6) (value n1)))))
(assert (or (not (> (value n5) (value n4))) (= (edge_value n4 n5) (- (value n5) (value n4)))))
(assert (or (not (> (value n4) (value n3))) (= (edge_value n3 n4) (- (value n4) (value n3)))))
(assert (or (not (> (value n3) (value n2))) (= (edge_value n2 n3) (- (value n3) (value n2)))))
(assert (or (not (> (value n2) (value n1))) (= (edge_value n1 n2) (- (value n2) (value n1)))))
(assert (forall ((N1 node) (N2 node)) (or (not (not (= N1 N2))) (not (= (value N1) (value N2))))))
Generators:
=== (and (forall ((x node) (y node)) (or (not (not (edge x y))) (= (edge_value x y) 0))) (forall ((x node) (y node)) (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y))))) (forall ((x node) (y node)) (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x)))))) ======================================
TODO: generator
===========================================
