(set-option :backend none)
(declare-datatype node ( (n1) (n2) (n3) (n4) (n5) (n6) (n7) (n8) (n9)))

(declare-datatype val (
      (v1) (v2) (v3) (v4) (v5) (v6) (v7) (v8) (v9) (v10)
      (v11) (v12) (v13) (v14) (v15) (v16) (v17) (v18) (v19) (v20)
      (v21) (v22) (v23) (v24) (v25)))

(declare-fun edge (node node) Bool)
(x-interpret-pred edge (x-set (n5 n1) (n5 n9) (n4 n9) (n3 n9) (n2 n9) (n1 n9) (n5 n8) (n4 n8) (n3 n8) (n2 n8) (n1 n8) (n5 n7) (n4 n7) (n3 n7) (n2 n7) (n1 n7) (n5 n6) (n4 n6) (n3 n6) (n2 n6) (n1 n6) (n4 n5) (n3 n4) (n2 n3) (n1 n2)))

(declare-fun edge_value (node node) val)

(declare-fun value (node) val)

; TODO - !V in val: V  >  0 => (#{X, Y in node: (edge_value(X,Y)  =  V) }  =  1).

; ! N1, N2 in node: N1 ~= N2 => value(N1) ~= value(N2).
(assert (forall ((N1 node) (N2 node))
            (=> (not (= N1 N2))
                (not (= (value N1) (value N2))))))

; !x, y in node: ~edge(x, y) => edge_value(x, y) = 0.
(assert (forall ((x node) (y node))
            (=> (not (edge x y))
                (= (edge_value x y) 0))))

; !x, y in node: edge(x, y) & value(x) >= value(y) => edge_value(x, y) = value(x) - value(y).
(assert (forall ((x node) (y node))
            (=> (and (edge x y) (>= (value x) (value y)))
                (= (edge_value x y) (- (value x) (value y))))))

; !x, y in node: edge(x, y) & value(y) > value(x) => edge_value(x, y) = value(y) - value(x).
(assert (forall ((x node) (y node))
            (=> (and (edge x y) (> (value y) (value x)))
                (= (edge_value x y) (- (value y) (value x))))))

(x-ground)
(x-debug solver functions)
(x-debug solver groundings)
-------------------------
(declare-datatype node ((n1 ) (n2 ) (n3 ) (n4 ) (n5 ) (n6 ) (n7 ) (n8 ) (n9 )))
(declare-datatype val ((v1 ) (v2 ) (v3 ) (v4 ) (v5 ) (v6 ) (v7 ) (v8 ) (v9 ) (v10 ) (v11 ) (v12 ) (v13 ) (v14 ) (v15 ) (v16 ) (v17 ) (v18 ) (v19 ) (v20 ) (v21 ) (v22 ) (v23 ) (v24 ) (v25 )))
(declare-fun edge (node node) Bool)
(declare-fun edge_value (node node) val)
(declare-fun value (node) val)
(assert (or true (not (= (value n1) (value n1)))))
(assert (or false (not (= (value n1) (value n2)))))
(assert (or false (not (= (value n1) (value n3)))))
(assert (or false (not (= (value n1) (value n4)))))
(assert (or false (not (= (value n1) (value n5)))))
(assert (or false (not (= (value n1) (value n6)))))
(assert (or false (not (= (value n1) (value n7)))))
(assert (or false (not (= (value n1) (value n8)))))
(assert (or false (not (= (value n1) (value n9)))))
(assert (or false (not (= (value n2) (value n1)))))
(assert (or true (not (= (value n2) (value n2)))))
(assert (or false (not (= (value n2) (value n3)))))
(assert (or false (not (= (value n2) (value n4)))))
(assert (or false (not (= (value n2) (value n5)))))
(assert (or false (not (= (value n2) (value n6)))))
(assert (or false (not (= (value n2) (value n7)))))
(assert (or false (not (= (value n2) (value n8)))))
(assert (or false (not (= (value n2) (value n9)))))
(assert (or false (not (= (value n3) (value n1)))))
(assert (or false (not (= (value n3) (value n2)))))
(assert (or true (not (= (value n3) (value n3)))))
(assert (or false (not (= (value n3) (value n4)))))
(assert (or false (not (= (value n3) (value n5)))))
(assert (or false (not (= (value n3) (value n6)))))
(assert (or false (not (= (value n3) (value n7)))))
(assert (or false (not (= (value n3) (value n8)))))
(assert (or false (not (= (value n3) (value n9)))))
(assert (or false (not (= (value n4) (value n1)))))
(assert (or false (not (= (value n4) (value n2)))))
(assert (or false (not (= (value n4) (value n3)))))
(assert (or true (not (= (value n4) (value n4)))))
(assert (or false (not (= (value n4) (value n5)))))
(assert (or false (not (= (value n4) (value n6)))))
(assert (or false (not (= (value n4) (value n7)))))
(assert (or false (not (= (value n4) (value n8)))))
(assert (or false (not (= (value n4) (value n9)))))
(assert (or false (not (= (value n5) (value n1)))))
(assert (or false (not (= (value n5) (value n2)))))
(assert (or false (not (= (value n5) (value n3)))))
(assert (or false (not (= (value n5) (value n4)))))
(assert (or true (not (= (value n5) (value n5)))))
(assert (or false (not (= (value n5) (value n6)))))
(assert (or false (not (= (value n5) (value n7)))))
(assert (or false (not (= (value n5) (value n8)))))
(assert (or false (not (= (value n5) (value n9)))))
(assert (or false (not (= (value n6) (value n1)))))
(assert (or false (not (= (value n6) (value n2)))))
(assert (or false (not (= (value n6) (value n3)))))
(assert (or false (not (= (value n6) (value n4)))))
(assert (or false (not (= (value n6) (value n5)))))
(assert (or true (not (= (value n6) (value n6)))))
(assert (or false (not (= (value n6) (value n7)))))
(assert (or false (not (= (value n6) (value n8)))))
(assert (or false (not (= (value n6) (value n9)))))
(assert (or false (not (= (value n7) (value n1)))))
(assert (or false (not (= (value n7) (value n2)))))
(assert (or false (not (= (value n7) (value n3)))))
(assert (or false (not (= (value n7) (value n4)))))
(assert (or false (not (= (value n7) (value n5)))))
(assert (or false (not (= (value n7) (value n6)))))
(assert (or true (not (= (value n7) (value n7)))))
(assert (or false (not (= (value n7) (value n8)))))
(assert (or false (not (= (value n7) (value n9)))))
(assert (or false (not (= (value n8) (value n1)))))
(assert (or false (not (= (value n8) (value n2)))))
(assert (or false (not (= (value n8) (value n3)))))
(assert (or false (not (= (value n8) (value n4)))))
(assert (or false (not (= (value n8) (value n5)))))
(assert (or false (not (= (value n8) (value n6)))))
(assert (or false (not (= (value n8) (value n7)))))
(assert (or true (not (= (value n8) (value n8)))))
(assert (or false (not (= (value n8) (value n9)))))
(assert (or false (not (= (value n9) (value n1)))))
(assert (or false (not (= (value n9) (value n2)))))
(assert (or false (not (= (value n9) (value n3)))))
(assert (or false (not (= (value n9) (value n4)))))
(assert (or false (not (= (value n9) (value n5)))))
(assert (or false (not (= (value n9) (value n6)))))
(assert (or false (not (= (value n9) (value n7)))))
(assert (or false (not (= (value n9) (value n8)))))
(assert (or true (not (= (value n9) (value n9)))))
(assert (= (edge_value n1 n1) 0))
(assert (= (edge_value n1 n3) 0))
(assert (= (edge_value n1 n4) 0))
(assert (= (edge_value n1 n5) 0))
(assert (= (edge_value n2 n1) 0))
(assert (= (edge_value n2 n2) 0))
(assert (= (edge_value n2 n4) 0))
(assert (= (edge_value n2 n5) 0))
(assert (= (edge_value n3 n1) 0))
(assert (= (edge_value n3 n2) 0))
(assert (= (edge_value n3 n3) 0))
(assert (= (edge_value n3 n5) 0))
(assert (= (edge_value n4 n1) 0))
(assert (= (edge_value n4 n2) 0))
(assert (= (edge_value n4 n3) 0))
(assert (= (edge_value n4 n4) 0))
(assert (= (edge_value n5 n2) 0))
(assert (= (edge_value n5 n3) 0))
(assert (= (edge_value n5 n4) 0))
(assert (= (edge_value n5 n5) 0))
(assert (= (edge_value n6 n1) 0))
(assert (= (edge_value n6 n2) 0))
(assert (= (edge_value n6 n3) 0))
(assert (= (edge_value n6 n4) 0))
(assert (= (edge_value n6 n5) 0))
(assert (= (edge_value n6 n6) 0))
(assert (= (edge_value n6 n7) 0))
(assert (= (edge_value n6 n8) 0))
(assert (= (edge_value n6 n9) 0))
(assert (= (edge_value n7 n1) 0))
(assert (= (edge_value n7 n2) 0))
(assert (= (edge_value n7 n3) 0))
(assert (= (edge_value n7 n4) 0))
(assert (= (edge_value n7 n5) 0))
(assert (= (edge_value n7 n6) 0))
(assert (= (edge_value n7 n7) 0))
(assert (= (edge_value n7 n8) 0))
(assert (= (edge_value n7 n9) 0))
(assert (= (edge_value n8 n1) 0))
(assert (= (edge_value n8 n2) 0))
(assert (= (edge_value n8 n3) 0))
(assert (= (edge_value n8 n4) 0))
(assert (= (edge_value n8 n5) 0))
(assert (= (edge_value n8 n6) 0))
(assert (= (edge_value n8 n7) 0))
(assert (= (edge_value n8 n8) 0))
(assert (= (edge_value n8 n9) 0))
(assert (= (edge_value n9 n1) 0))
(assert (= (edge_value n9 n2) 0))
(assert (= (edge_value n9 n3) 0))
(assert (= (edge_value n9 n4) 0))
(assert (= (edge_value n9 n5) 0))
(assert (= (edge_value n9 n6) 0))
(assert (= (edge_value n9 n7) 0))
(assert (= (edge_value n9 n8) 0))
(assert (= (edge_value n9 n9) 0))
(assert (or (not (>= (value n5) (value n1))) (= (edge_value n5 n1) (- (value n5) (value n1)))))
(assert (or (not (>= (value n5) (value n9))) (= (edge_value n5 n9) (- (value n5) (value n9)))))
(assert (or (not (>= (value n4) (value n9))) (= (edge_value n4 n9) (- (value n4) (value n9)))))
(assert (or (not (>= (value n3) (value n9))) (= (edge_value n3 n9) (- (value n3) (value n9)))))
(assert (or (not (>= (value n2) (value n9))) (= (edge_value n2 n9) (- (value n2) (value n9)))))
(assert (or (not (>= (value n1) (value n9))) (= (edge_value n1 n9) (- (value n1) (value n9)))))
(assert (or (not (>= (value n5) (value n8))) (= (edge_value n5 n8) (- (value n5) (value n8)))))
(assert (or (not (>= (value n4) (value n8))) (= (edge_value n4 n8) (- (value n4) (value n8)))))
(assert (or (not (>= (value n3) (value n8))) (= (edge_value n3 n8) (- (value n3) (value n8)))))
(assert (or (not (>= (value n2) (value n8))) (= (edge_value n2 n8) (- (value n2) (value n8)))))
(assert (or (not (>= (value n1) (value n8))) (= (edge_value n1 n8) (- (value n1) (value n8)))))
(assert (or (not (>= (value n5) (value n7))) (= (edge_value n5 n7) (- (value n5) (value n7)))))
(assert (or (not (>= (value n4) (value n7))) (= (edge_value n4 n7) (- (value n4) (value n7)))))
(assert (or (not (>= (value n3) (value n7))) (= (edge_value n3 n7) (- (value n3) (value n7)))))
(assert (or (not (>= (value n2) (value n7))) (= (edge_value n2 n7) (- (value n2) (value n7)))))
(assert (or (not (>= (value n1) (value n7))) (= (edge_value n1 n7) (- (value n1) (value n7)))))
(assert (or (not (>= (value n5) (value n6))) (= (edge_value n5 n6) (- (value n5) (value n6)))))
(assert (or (not (>= (value n4) (value n6))) (= (edge_value n4 n6) (- (value n4) (value n6)))))
(assert (or (not (>= (value n3) (value n6))) (= (edge_value n3 n6) (- (value n3) (value n6)))))
(assert (or (not (>= (value n2) (value n6))) (= (edge_value n2 n6) (- (value n2) (value n6)))))
(assert (or (not (>= (value n1) (value n6))) (= (edge_value n1 n6) (- (value n1) (value n6)))))
(assert (or (not (>= (value n4) (value n5))) (= (edge_value n4 n5) (- (value n4) (value n5)))))
(assert (or (not (>= (value n3) (value n4))) (= (edge_value n3 n4) (- (value n3) (value n4)))))
(assert (or (not (>= (value n2) (value n3))) (= (edge_value n2 n3) (- (value n2) (value n3)))))
(assert (or (not (>= (value n1) (value n2))) (= (edge_value n1 n2) (- (value n1) (value n2)))))
(assert (or (not (> (value n1) (value n5))) (= (edge_value n5 n1) (- (value n1) (value n5)))))
(assert (or (not (> (value n9) (value n5))) (= (edge_value n5 n9) (- (value n9) (value n5)))))
(assert (or (not (> (value n9) (value n4))) (= (edge_value n4 n9) (- (value n9) (value n4)))))
(assert (or (not (> (value n9) (value n3))) (= (edge_value n3 n9) (- (value n9) (value n3)))))
(assert (or (not (> (value n9) (value n2))) (= (edge_value n2 n9) (- (value n9) (value n2)))))
(assert (or (not (> (value n9) (value n1))) (= (edge_value n1 n9) (- (value n9) (value n1)))))
(assert (or (not (> (value n8) (value n5))) (= (edge_value n5 n8) (- (value n8) (value n5)))))
(assert (or (not (> (value n8) (value n4))) (= (edge_value n4 n8) (- (value n8) (value n4)))))
(assert (or (not (> (value n8) (value n3))) (= (edge_value n3 n8) (- (value n8) (value n3)))))
(assert (or (not (> (value n8) (value n2))) (= (edge_value n2 n8) (- (value n8) (value n2)))))
(assert (or (not (> (value n8) (value n1))) (= (edge_value n1 n8) (- (value n8) (value n1)))))
(assert (or (not (> (value n7) (value n5))) (= (edge_value n5 n7) (- (value n7) (value n5)))))
(assert (or (not (> (value n7) (value n4))) (= (edge_value n4 n7) (- (value n7) (value n4)))))
(assert (or (not (> (value n7) (value n3))) (= (edge_value n3 n7) (- (value n7) (value n3)))))
(assert (or (not (> (value n7) (value n2))) (= (edge_value n2 n7) (- (value n7) (value n2)))))
(assert (or (not (> (value n7) (value n1))) (= (edge_value n1 n7) (- (value n7) (value n1)))))
(assert (or (not (> (value n6) (value n5))) (= (edge_value n5 n6) (- (value n6) (value n5)))))
(assert (or (not (> (value n6) (value n4))) (= (edge_value n4 n6) (- (value n6) (value n4)))))
(assert (or (not (> (value n6) (value n3))) (= (edge_value n3 n6) (- (value n6) (value n3)))))
(assert (or (not (> (value n6) (value n2))) (= (edge_value n2 n6) (- (value n6) (value n2)))))
(assert (or (not (> (value n6) (value n1))) (= (edge_value n1 n6) (- (value n6) (value n1)))))
(assert (or (not (> (value n5) (value n4))) (= (edge_value n4 n5) (- (value n5) (value n4)))))
(assert (or (not (> (value n4) (value n3))) (= (edge_value n3 n4) (- (value n4) (value n3)))))
(assert (or (not (> (value n3) (value n2))) (= (edge_value n2 n3) (- (value n3) (value n2)))))
(assert (or (not (> (value n2) (value n1))) (= (edge_value n1 n2) (- (value n2) (value n1)))))
Functions2:
 - true ()->Bool : Constructor
 - false ()->Bool : Constructor
 - not ()->Bool : Predefined (true)
 - => ()->Bool : Predefined (true)
 - and ()->Bool : Predefined (true)
 - or ()->Bool : Predefined (true)
 - xor ()->Bool : Predefined (true)
 - = ()->Bool : Predefined (true)
 - distinct ()->Bool : Predefined (true)
 - <= ()->Bool : Predefined (true)
 - < ()->Bool : Predefined (true)
 - >= ()->Bool : Predefined (true)
 - > ()->Bool : Predefined (true)
 - ite ()->Bool : Predefined (?)
 - let ()->Bool : Predefined (?)
 - + ()->Real : Predefined (false)
 - - ()->Real : Predefined (false)
 - * ()->Real : Predefined (false)
 - div ()->Real : Predefined (false)
 - mod ()->Real : Predefined (false)
 - abs ()->Real : Predefined (false)
 - n1 ()->node : Constructor
 - n2 ()->node : Constructor
 - n3 ()->node : Constructor
 - n4 ()->node : Constructor
 - n5 ()->node : Constructor
 - n6 ()->node : Constructor
 - n7 ()->node : Constructor
 - n8 ()->node : Constructor
 - n9 ()->node : Constructor
 - (_ is n1) (node)->Bool : Boolean (_xmt_node_n1_tester_t Complete, _xmt_node_n1_tester_f Complete, _xmt_node_n1_tester_g Complete)
 - (_ is n2) (node)->Bool : Boolean (_xmt_node_n2_tester_t Complete, _xmt_node_n2_tester_f Complete, _xmt_node_n2_tester_g Complete)
 - (_ is n3) (node)->Bool : Boolean (_xmt_node_n3_tester_t Complete, _xmt_node_n3_tester_f Complete, _xmt_node_n3_tester_g Complete)
 - (_ is n4) (node)->Bool : Boolean (_xmt_node_n4_tester_t Complete, _xmt_node_n4_tester_f Complete, _xmt_node_n4_tester_g Complete)
 - (_ is n5) (node)->Bool : Boolean (_xmt_node_n5_tester_t Complete, _xmt_node_n5_tester_f Complete, _xmt_node_n5_tester_g Complete)
 - (_ is n6) (node)->Bool : Boolean (_xmt_node_n6_tester_t Complete, _xmt_node_n6_tester_f Complete, _xmt_node_n6_tester_g Complete)
 - (_ is n7) (node)->Bool : Boolean (_xmt_node_n7_tester_t Complete, _xmt_node_n7_tester_f Complete, _xmt_node_n7_tester_g Complete)
 - (_ is n8) (node)->Bool : Boolean (_xmt_node_n8_tester_t Complete, _xmt_node_n8_tester_f Complete, _xmt_node_n8_tester_g Complete)
 - (_ is n9) (node)->Bool : Boolean (_xmt_node_n9_tester_t Complete, _xmt_node_n9_tester_f Complete, _xmt_node_n9_tester_g Complete)
 - v1 ()->val : Constructor
 - v2 ()->val : Constructor
 - v3 ()->val : Constructor
 - v4 ()->val : Constructor
 - v5 ()->val : Constructor
 - v6 ()->val : Constructor
 - v7 ()->val : Constructor
 - v8 ()->val : Constructor
 - v9 ()->val : Constructor
 - v10 ()->val : Constructor
 - v11 ()->val : Constructor
 - v12 ()->val : Constructor
 - v13 ()->val : Constructor
 - v14 ()->val : Constructor
 - v15 ()->val : Constructor
 - v16 ()->val : Constructor
 - v17 ()->val : Constructor
 - v18 ()->val : Constructor
 - v19 ()->val : Constructor
 - v20 ()->val : Constructor
 - v21 ()->val : Constructor
 - v22 ()->val : Constructor
 - v23 ()->val : Constructor
 - v24 ()->val : Constructor
 - v25 ()->val : Constructor
 - (_ is v1) (val)->Bool : Boolean (_xmt_val_v1_tester_t Complete, _xmt_val_v1_tester_f Complete, _xmt_val_v1_tester_g Complete)
 - (_ is v2) (val)->Bool : Boolean (_xmt_val_v2_tester_t Complete, _xmt_val_v2_tester_f Complete, _xmt_val_v2_tester_g Complete)
 - (_ is v3) (val)->Bool : Boolean (_xmt_val_v3_tester_t Complete, _xmt_val_v3_tester_f Complete, _xmt_val_v3_tester_g Complete)
 - (_ is v4) (val)->Bool : Boolean (_xmt_val_v4_tester_t Complete, _xmt_val_v4_tester_f Complete, _xmt_val_v4_tester_g Complete)
 - (_ is v5) (val)->Bool : Boolean (_xmt_val_v5_tester_t Complete, _xmt_val_v5_tester_f Complete, _xmt_val_v5_tester_g Complete)
 - (_ is v6) (val)->Bool : Boolean (_xmt_val_v6_tester_t Complete, _xmt_val_v6_tester_f Complete, _xmt_val_v6_tester_g Complete)
 - (_ is v7) (val)->Bool : Boolean (_xmt_val_v7_tester_t Complete, _xmt_val_v7_tester_f Complete, _xmt_val_v7_tester_g Complete)
 - (_ is v8) (val)->Bool : Boolean (_xmt_val_v8_tester_t Complete, _xmt_val_v8_tester_f Complete, _xmt_val_v8_tester_g Complete)
 - (_ is v9) (val)->Bool : Boolean (_xmt_val_v9_tester_t Complete, _xmt_val_v9_tester_f Complete, _xmt_val_v9_tester_g Complete)
 - (_ is v10) (val)->Bool : Boolean (_xmt_val_v10_tester_t Complete, _xmt_val_v10_tester_f Complete, _xmt_val_v10_tester_g Complete)
 - (_ is v11) (val)->Bool : Boolean (_xmt_val_v11_tester_t Complete, _xmt_val_v11_tester_f Complete, _xmt_val_v11_tester_g Complete)
 - (_ is v12) (val)->Bool : Boolean (_xmt_val_v12_tester_t Complete, _xmt_val_v12_tester_f Complete, _xmt_val_v12_tester_g Complete)
 - (_ is v13) (val)->Bool : Boolean (_xmt_val_v13_tester_t Complete, _xmt_val_v13_tester_f Complete, _xmt_val_v13_tester_g Complete)
 - (_ is v14) (val)->Bool : Boolean (_xmt_val_v14_tester_t Complete, _xmt_val_v14_tester_f Complete, _xmt_val_v14_tester_g Complete)
 - (_ is v15) (val)->Bool : Boolean (_xmt_val_v15_tester_t Complete, _xmt_val_v15_tester_f Complete, _xmt_val_v15_tester_g Complete)
 - (_ is v16) (val)->Bool : Boolean (_xmt_val_v16_tester_t Complete, _xmt_val_v16_tester_f Complete, _xmt_val_v16_tester_g Complete)
 - (_ is v17) (val)->Bool : Boolean (_xmt_val_v17_tester_t Complete, _xmt_val_v17_tester_f Complete, _xmt_val_v17_tester_g Complete)
 - (_ is v18) (val)->Bool : Boolean (_xmt_val_v18_tester_t Complete, _xmt_val_v18_tester_f Complete, _xmt_val_v18_tester_g Complete)
 - (_ is v19) (val)->Bool : Boolean (_xmt_val_v19_tester_t Complete, _xmt_val_v19_tester_f Complete, _xmt_val_v19_tester_g Complete)
 - (_ is v20) (val)->Bool : Boolean (_xmt_val_v20_tester_t Complete, _xmt_val_v20_tester_f Complete, _xmt_val_v20_tester_g Complete)
 - (_ is v21) (val)->Bool : Boolean (_xmt_val_v21_tester_t Complete, _xmt_val_v21_tester_f Complete, _xmt_val_v21_tester_g Complete)
 - (_ is v22) (val)->Bool : Boolean (_xmt_val_v22_tester_t Complete, _xmt_val_v22_tester_f Complete, _xmt_val_v22_tester_g Complete)
 - (_ is v23) (val)->Bool : Boolean (_xmt_val_v23_tester_t Complete, _xmt_val_v23_tester_f Complete, _xmt_val_v23_tester_g Complete)
 - (_ is v24) (val)->Bool : Boolean (_xmt_val_v24_tester_t Complete, _xmt_val_v24_tester_f Complete, _xmt_val_v24_tester_g Complete)
 - (_ is v25) (val)->Bool : Boolean (_xmt_val_v25_tester_t Complete, _xmt_val_v25_tester_f Complete, _xmt_val_v25_tester_g Complete)
 - edge (node, node)->Bool : Boolean (_xmt_edge_TU Complete, _xmt_edge_UF Complete, _xmt_edge_G Complete)
 - edge_value (node, node)->val : Not interpreted
 - value (node)->val : Not interpreted
Groundings:
===  N1 ======================================
 -- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node.G AS G
  FROM _xmt_node
===  N2 ======================================
 -- Join(0)
SELECT _xmt_node_1.G AS N2,
       _xmt_node_1.G AS G
  FROM _xmt_node AS _xmt_node_1
===  (= N1 N2) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       eq_(_xmt_node.G, _xmt_node_1.G) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       eq_(_xmt_node.G, _xmt_node_1.G) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       eq_(_xmt_node.G, _xmt_node_1.G) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1

===  (not (= N1 N2)) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       not_(eq_(_xmt_node.G, _xmt_node_1.G)) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       not_(eq_(_xmt_node.G, _xmt_node_1.G)) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       not_(eq_(_xmt_node.G, _xmt_node_1.G)) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1

===  (not (not (= N1 N2))) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1

===  (value N1) ======================================
 -- Join(0)
SELECT _xmt_node.G AS N1,
       apply("value", _xmt_node.G) AS G
  FROM _xmt_node
===  (value N2) ======================================
 -- Join(0)
SELECT _xmt_node_1.G AS N2,
       apply("value", _xmt_node_1.G) AS G
  FROM _xmt_node AS _xmt_node_1
===  (= (value N1) (value N2)) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1

===  (not (= (value N1) (value N2))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1

===  (or (not (not (= N1 N2))) (not (= (value N1) (value N2)))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT N1, N2,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_node.G AS N1,
                     _xmt_node_1.G AS N2,
                     not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))) AS G
                FROM _xmt_node
                JOIN _xmt_node AS _xmt_node_1
              UNION ALL
              -- Join(14)
              SELECT _xmt_node.G AS N1,
                     _xmt_node_1.G AS N2,
                     apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G))) AS G
                FROM _xmt_node
                JOIN _xmt_node AS _xmt_node_1)
        WHERE G <> "false")
 GROUP BY N1, N2
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node.G AS N1,
       _xmt_node_1.G AS N2,
       apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
  FROM _xmt_node
  JOIN _xmt_node AS _xmt_node_1

=== (top) (forall ((N1 node) (N2 node)) (or (not (not (= N1 N2))) (not (= (value N1) (value N2))))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS N1, NULL AS N2, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_node.G AS N1,
                     _xmt_node_1.G AS N2,
                     apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
                FROM _xmt_node
                JOIN _xmt_node AS _xmt_node_1)
        WHERE G <> "true")
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_node.G AS N1,
                     _xmt_node_1.G AS N2,
                     apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
                FROM _xmt_node
                JOIN _xmt_node AS _xmt_node_1)
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS N1, NULL AS N2, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_node.G AS N1,
                     _xmt_node_1.G AS N2,
                     apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
                FROM _xmt_node
                JOIN _xmt_node AS _xmt_node_1)
        WHERE G <> "true")

===  x ======================================
 -- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_11.G AS G
  FROM _xmt_node AS _xmt_node_11
===  y ======================================
 -- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_12.G AS G
  FROM _xmt_node AS _xmt_node_12
===  (edge x y) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_TU_13.a_1 AS x,
       _xmt_edge_TU_13.a_2 AS y,
       "true" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_13
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_UF_13.a_1 AS x,
       _xmt_edge_UF_13.a_2 AS y,
       "false" AS G
  FROM _xmt_edge_UF AS _xmt_edge_UF_13
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_G_13.a_1 AS x,
       _xmt_edge_G_13.a_2 AS y,
       _xmt_edge_G_13.G AS G
  FROM _xmt_edge_G AS _xmt_edge_G_13

===  (not (edge x y)) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_UF_13.a_1 AS x,
       _xmt_edge_UF_13.a_2 AS y,
       "true" AS G
  FROM _xmt_edge_UF AS _xmt_edge_UF_13
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_TU_13.a_1 AS x,
       _xmt_edge_TU_13.a_2 AS y,
       "false" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_13
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_G_13.a_1 AS x,
       _xmt_edge_G_13.a_2 AS y,
       not_(_xmt_edge_G_13.G) AS G
  FROM _xmt_edge_G AS _xmt_edge_G_13

===  (not (not (edge x y))) ======================================
----- T ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_TU_13.a_1 AS x,
       _xmt_edge_TU_13.a_2 AS y,
       "true" AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_13
----- F ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_UF_13.a_1 AS x,
       _xmt_edge_UF_13.a_2 AS y,
       "false" AS G
  FROM _xmt_edge_UF AS _xmt_edge_UF_13
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_G_13.a_1 AS x,
       _xmt_edge_G_13.a_2 AS y,
       not_(not_(_xmt_edge_G_13.G)) AS G
  FROM _xmt_edge_G AS _xmt_edge_G_13

===  (edge_value x y) ======================================
 -- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("edge_value", _xmt_node_11.G, _xmt_node_12.G) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
===  0 ======================================
 -- Join(0)
SELECT 0 AS G
===  (= (edge_value x y) 0) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), 0) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), 0) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), 0) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12

===  (or (not (not (edge x y))) (= (edge_value x y) 0)) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT x, y,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     "true" AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13
              UNION ALL
              -- Join(14)
              SELECT _xmt_node_11.G AS x,
                     _xmt_node_12.G AS y,
                     apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), 0) AS G
                FROM _xmt_node AS _xmt_node_11
                JOIN _xmt_node AS _xmt_node_12)
        WHERE G <> "false")
 GROUP BY x, y
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_UF_13.a_1 AS x,
       _xmt_edge_UF_13.a_2 AS y,
       apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
  FROM _xmt_edge_UF AS _xmt_edge_UF_13
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_G_13.a_1 AS x,
       _xmt_edge_G_13.a_2 AS y,
       apply("or", not_(not_(_xmt_edge_G_13.G)), apply("=", apply("edge_value", _xmt_edge_G_13.a_1, _xmt_edge_G_13.a_2), 0)) AS G
  FROM _xmt_edge_G AS _xmt_edge_G_13

=== (top) (forall ((x node) (y node)) (or (not (not (edge x y))) (= (edge_value x y) 0))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_UF_13.a_1 AS x,
                     _xmt_edge_UF_13.a_2 AS y,
                     apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
                FROM _xmt_edge_UF AS _xmt_edge_UF_13)
        WHERE G <> "true")
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_UF_13.a_1 AS x,
                     _xmt_edge_UF_13.a_2 AS y,
                     apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
                FROM _xmt_edge_UF AS _xmt_edge_UF_13)
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_UF_13.a_1 AS x,
                     _xmt_edge_UF_13.a_2 AS y,
                     apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
                FROM _xmt_edge_UF AS _xmt_edge_UF_13)
        WHERE G <> "true")

===  (value x) ======================================
 -- Join(0)
SELECT _xmt_node_11.G AS x,
       apply("value", _xmt_node_11.G) AS G
  FROM _xmt_node AS _xmt_node_11
===  (value y) ======================================
 -- Join(0)
SELECT _xmt_node_12.G AS y,
       apply("value", _xmt_node_12.G) AS G
  FROM _xmt_node AS _xmt_node_12
===  (>= (value x) (value y)) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G)) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G)) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G)) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12

===  (not (>= (value x) (value y))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("not", apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("not", apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("not", apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12

===  (- (value x) (value y)) ======================================
 -- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("-", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G)) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
===  (= (edge_value x y) (- (value x) (value y))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12

===  (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y)))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT x, y,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_UF_13.a_1 AS x,
                     _xmt_edge_UF_13.a_2 AS y,
                     "true" AS G
                FROM _xmt_edge_UF AS _xmt_edge_UF_13
              UNION ALL
              -- Join(14)
              SELECT _xmt_node_11.G AS x,
                     _xmt_node_12.G AS y,
                     apply("not", apply(">=", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
                FROM _xmt_node AS _xmt_node_11
                JOIN _xmt_node AS _xmt_node_12
              UNION ALL
              -- Join(14)
              SELECT _xmt_node_11.G AS x,
                     _xmt_node_12.G AS y,
                     apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_11.G), apply("value", _xmt_node_12.G))) AS G
                FROM _xmt_node AS _xmt_node_11
                JOIN _xmt_node AS _xmt_node_12)
        WHERE G <> "false")
 GROUP BY x, y
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_TU_13.a_1 AS x,
       _xmt_edge_TU_13.a_2 AS y,
       apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_13
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_G_13.a_1 AS x,
       _xmt_edge_G_13.a_2 AS y,
       apply("or", not_(_xmt_edge_G_13.G), apply("not", apply(">=", apply("value", _xmt_edge_G_13.a_1), apply("value", _xmt_edge_G_13.a_2))), apply("=", apply("edge_value", _xmt_edge_G_13.a_1, _xmt_edge_G_13.a_2), apply("-", apply("value", _xmt_edge_G_13.a_1), apply("value", _xmt_edge_G_13.a_2)))) AS G
  FROM _xmt_edge_G AS _xmt_edge_G_13

=== (top) (forall ((x node) (y node)) (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y))))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13)
        WHERE G <> "true")
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13)
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13)
        WHERE G <> "true")

===  (> (value y) (value x)) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G)) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G)) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G)) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11

===  (not (> (value y) (value x))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply("not", apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply("not", apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply("not", apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11

===  (- (value y) (value x)) ======================================
 -- Join(0)
SELECT _xmt_node_12.G AS y,
       _xmt_node_11.G AS x,
       apply("-", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G)) AS G
  FROM _xmt_node AS _xmt_node_12
  JOIN _xmt_node AS _xmt_node_11
===  (= (edge_value x y) (- (value y) (value x))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_node_11.G AS x,
       _xmt_node_12.G AS y,
       apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
  FROM _xmt_node AS _xmt_node_11
  JOIN _xmt_node AS _xmt_node_12

===  (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x)))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT x, y,
       or_aggregate(G) as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_UF_13.a_1 AS x,
                     _xmt_edge_UF_13.a_2 AS y,
                     "true" AS G
                FROM _xmt_edge_UF AS _xmt_edge_UF_13
              UNION ALL
              -- Join(14)
              SELECT _xmt_node_12.G AS y,
                     _xmt_node_11.G AS x,
                     apply("not", apply(">", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
                FROM _xmt_node AS _xmt_node_12
                JOIN _xmt_node AS _xmt_node_11
              UNION ALL
              -- Join(14)
              SELECT _xmt_node_11.G AS x,
                     _xmt_node_12.G AS y,
                     apply("=", apply("edge_value", _xmt_node_11.G, _xmt_node_12.G), apply("-", apply("value", _xmt_node_12.G), apply("value", _xmt_node_11.G))) AS G
                FROM _xmt_node AS _xmt_node_11
                JOIN _xmt_node AS _xmt_node_12)
        WHERE G <> "false")
 GROUP BY x, y
----- UF -----------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_TU_13.a_1 AS x,
       _xmt_edge_TU_13.a_2 AS y,
       apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
  FROM _xmt_edge_TU AS _xmt_edge_TU_13
----- G ------------------------------------------------------------
-- Join(0)
SELECT _xmt_edge_G_13.a_1 AS x,
       _xmt_edge_G_13.a_2 AS y,
       apply("or", not_(_xmt_edge_G_13.G), apply("not", apply(">", apply("value", _xmt_edge_G_13.a_2), apply("value", _xmt_edge_G_13.a_1))), apply("=", apply("edge_value", _xmt_edge_G_13.a_1, _xmt_edge_G_13.a_2), apply("-", apply("value", _xmt_edge_G_13.a_2), apply("value", _xmt_edge_G_13.a_1)))) AS G
  FROM _xmt_edge_G AS _xmt_edge_G_13

=== (top) (forall ((x node) (y node)) (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x))))) ======================================
----- TU -----------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13)
        WHERE G <> "true")
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13)
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Agg (0)
SELECT and_aggregate(G) as G
 FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
       UNION ALL
       -- exclude(7)
       SELECT *
        FROM (-- Join(14)
              SELECT _xmt_edge_TU_13.a_1 AS x,
                     _xmt_edge_TU_13.a_2 AS y,
                     apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
                FROM _xmt_edge_TU AS _xmt_edge_TU_13)
        WHERE G <> "true")

=== (top) (and (forall ((N1 node) (N2 node)) (or (not (not (= N1 N2))) (not (= (value N1) (value N2))))) (forall ((x node) (y node)) (or (not (not (edge x y))) (= (edge_value x y) 0))) (forall ((x node) (y node)) (or (not (edge x y)) (not (>= (value x) (value y))) (= (edge_value x y) (- (value x) (value y))))) (forall ((x node) (y node)) (or (not (edge x y)) (not (> (value y) (value x))) (= (edge_value x y) (- (value y) (value x)))))) ======================================
----- TU -----------------------------------------------------------
-- Join(0)
SELECT and_(Agg_10_TU.G, Agg_20_TU.G, Agg_28_TU.G, Agg_34_TU.G) AS G
  FROM (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS N1, NULL AS N2, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_node.G AS N1,
                             _xmt_node_1.G AS N2,
                             apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
                        FROM _xmt_node
                        JOIN _xmt_node AS _xmt_node_1)
                WHERE G <> "true")
        ) AS Agg_10_TU
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_edge_UF_13.a_1 AS x,
                             _xmt_edge_UF_13.a_2 AS y,
                             apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
                        FROM _xmt_edge_UF AS _xmt_edge_UF_13)
                WHERE G <> "true")
        ) AS Agg_20_TU
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_edge_TU_13.a_1 AS x,
                             _xmt_edge_TU_13.a_2 AS y,
                             apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
                        FROM _xmt_edge_TU AS _xmt_edge_TU_13)
                WHERE G <> "true")
        ) AS Agg_28_TU
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_edge_TU_13.a_1 AS x,
                             _xmt_edge_TU_13.a_2 AS y,
                             apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
                        FROM _xmt_edge_TU AS _xmt_edge_TU_13)
                WHERE G <> "true")
        ) AS Agg_34_TU
----- UF -----------------------------------------------------------
-- Agg (0)
SELECT G as G
 FROM (-- exclude(7)
       SELECT *
        FROM (-- Agg (14)
              SELECT G as G
               FROM (-- exclude(21)
                     SELECT *
                      FROM (-- Join(28)
                            SELECT _xmt_node.G AS N1,
                                   _xmt_node_1.G AS N2,
                                   apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
                              FROM _xmt_node
                              JOIN _xmt_node AS _xmt_node_1)
                      WHERE G <> "true")
              UNION ALL
              -- Agg (14)
              SELECT G as G
               FROM (-- exclude(21)
                     SELECT *
                      FROM (-- Join(28)
                            SELECT _xmt_edge_UF_13.a_1 AS x,
                                   _xmt_edge_UF_13.a_2 AS y,
                                   apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
                              FROM _xmt_edge_UF AS _xmt_edge_UF_13)
                      WHERE G <> "true")
              UNION ALL
              -- Agg (14)
              SELECT G as G
               FROM (-- exclude(21)
                     SELECT *
                      FROM (-- Join(28)
                            SELECT _xmt_edge_TU_13.a_1 AS x,
                                   _xmt_edge_TU_13.a_2 AS y,
                                   apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
                              FROM _xmt_edge_TU AS _xmt_edge_TU_13)
                      WHERE G <> "true")
              UNION ALL
              -- Agg (14)
              SELECT G as G
               FROM (-- exclude(21)
                     SELECT *
                      FROM (-- Join(28)
                            SELECT _xmt_edge_TU_13.a_1 AS x,
                                   _xmt_edge_TU_13.a_2 AS y,
                                   apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
                              FROM _xmt_edge_TU AS _xmt_edge_TU_13)
                      WHERE G <> "true"))
        WHERE G <> "true")
----- G ------------------------------------------------------------
-- Join(0)
SELECT and_(Agg_10_G.G, Agg_20_G.G, Agg_28_G.G, Agg_34_G.G) AS G
  FROM (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS N1, NULL AS N2, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_node.G AS N1,
                             _xmt_node_1.G AS N2,
                             apply("or", not_(not_(eq_(_xmt_node.G, _xmt_node_1.G))), apply("not", apply("=", apply("value", _xmt_node.G), apply("value", _xmt_node_1.G)))) AS G
                        FROM _xmt_node
                        JOIN _xmt_node AS _xmt_node_1)
                WHERE G <> "true")
        ) AS Agg_10_G
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_edge_UF_13.a_1 AS x,
                             _xmt_edge_UF_13.a_2 AS y,
                             apply("=", apply("edge_value", _xmt_edge_UF_13.a_1, _xmt_edge_UF_13.a_2), 0) AS G
                        FROM _xmt_edge_UF AS _xmt_edge_UF_13)
                WHERE G <> "true")
        ) AS Agg_20_G
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_edge_TU_13.a_1 AS x,
                             _xmt_edge_TU_13.a_2 AS y,
                             apply("or", apply("not", apply(">=", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_1), apply("value", _xmt_edge_TU_13.a_2)))) AS G
                        FROM _xmt_edge_TU AS _xmt_edge_TU_13)
                WHERE G <> "true")
        ) AS Agg_28_G
  JOIN (-- Agg (8)
        SELECT and_aggregate(G) as G
         FROM (SELECT NULL AS x, NULL AS y, "true" AS G 
               UNION ALL
               -- exclude(15)
               SELECT *
                FROM (-- Join(22)
                      SELECT _xmt_edge_TU_13.a_1 AS x,
                             _xmt_edge_TU_13.a_2 AS y,
                             apply("or", apply("not", apply(">", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1))), apply("=", apply("edge_value", _xmt_edge_TU_13.a_1, _xmt_edge_TU_13.a_2), apply("-", apply("value", _xmt_edge_TU_13.a_2), apply("value", _xmt_edge_TU_13.a_1)))) AS G
                        FROM _xmt_edge_TU AS _xmt_edge_TU_13)
                WHERE G <> "true")
        ) AS Agg_34_G

===========================================
