(set-option :backend none)

(declare-datatype Node ( (a) (b) ))
(declare-datatype Color ( (red) (green) (blue) ))

(declare-fun edge (Node Node) Bool)
(declare-fun keep (Node) Bool)
(declare-fun kept_edge (Node Node) Bool)
(declare-fun color (Node) Color)

(assert (forall ((x Node) (y Node))
                (or (keep x) (keep y) (= x y))))
(assert (forall ((x Node) (y Node))
                (= (kept_edge x y)
                   (and (keep x) (keep y) (edge x y)))))
(assert (forall ((x Node) (y Node))
                (=> (kept_edge x y)
                    (not (= (color x) (color y))))))
(assert (forall ((x Node))
                (=> (not (keep x))
                    (= (color x) red))))

(x-interpret-pred edge (x-set (a b)))

(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype Node ((a) (b)))
(declare-datatype Color ((red) (green) (blue)))
(declare-fun edge (Node Node) Bool)
(declare-fun keep (Node) Bool)
(declare-fun kept_edge (Node Node) Bool)
(declare-fun color (Node) Color)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_node.G AS x,
;              _xmt_sort_node_2.G AS y,
;              or_(apply("keep", _xmt_sort_node.G), apply("keep", _xmt_sort_node_2.G), eq_(_xmt_sort_node.G, _xmt_sort_node_2.G)) AS G
;         FROM _xmt_sort_node
;         JOIN _xmt_sort_node AS _xmt_sort_node_2
;        WHERE _xmt_sort_node.G != _xmt_sort_node_2.G)(assert (or (keep a) (keep b)))
(assert (or (keep b) (keep a)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_edge_G_8.a_1 AS x,
;              _xmt_interp_edge_G_8.a_2 AS y,
;              apply("=", apply("kept_edge", _xmt_interp_edge_G_8.a_1, _xmt_interp_edge_G_8.a_2), and_(apply("keep", _xmt_interp_edge_G_8.a_1), apply("keep", _xmt_interp_edge_G_8.a_2), _xmt_interp_edge_G_8.G)) AS G
;         FROM _xmt_interp_edge_G AS _xmt_interp_edge_G_8)(assert (= (kept_edge a a) false))
(assert (= (kept_edge a b) (and (keep a) (keep b))))
(assert (= (kept_edge b a) false))
(assert (= (kept_edge b b) false))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_node.G AS x,
;              _xmt_sort_node_2.G AS y,
;              or_(apply("not", apply("kept_edge", _xmt_sort_node.G, _xmt_sort_node_2.G)), apply("not", apply("=", apply("color", _xmt_sort_node.G), apply("color", _xmt_sort_node_2.G)))) AS G
;         FROM _xmt_sort_node
;         JOIN _xmt_sort_node AS _xmt_sort_node_2)(assert (or (not (kept_edge a a)) (not (= (color a) (color a)))))
(assert (or (not (kept_edge a b)) (not (= (color a) (color b)))))
(assert (or (not (kept_edge b a)) (not (= (color b) (color a)))))
(assert (or (not (kept_edge b b)) (not (= (color b) (color b)))))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_node.G AS x,
;              or_(apply("not", apply("not", apply("keep", _xmt_sort_node.G))), apply("=", apply("color", _xmt_sort_node.G), "red")) AS G
;         FROM _xmt_sort_node)(assert (or (not (not (keep a))) (= (color a) red)))
(assert (or (not (not (keep b))) (= (color b) red)))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((x Node) (y Node)) (or (keep x) (keep y) (= x y))) ======================================
TODO: generator
=== (forall ((x Node) (y Node)) (= (kept_edge x y) (and (keep x) (keep y) (edge x y)))) ======================================
TODO: generator
=== (forall ((x Node) (y Node)) (or (not (kept_edge x y)) (not (= (color x) (color y))))) ======================================
TODO: generator
=== (forall ((x Node)) (or (not (not (keep x))) (= (color x) red))) ======================================
TODO: generator
===========================================
