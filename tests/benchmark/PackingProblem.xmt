(set-option :backend none)

(declare-datatype Square ( (q1) (q2) ))

(declare-fun pos_x (Square) Int)
(declare-fun pos_y (Square) Int)
(declare-fun square_size (Square) Int)
(declare-fun area_width () Int)
(declare-fun area_height () Int)

(assert (forall ((s Square)) (<= 0 (pos_x s))))
(assert (forall ((s Square)) (<= 0 (pos_y s))))
(assert (forall ((s Square)) (<= (+ (pos_x s) (square_size s)) area_width)))
(assert (forall ((s Square)) (<= (+ (pos_y s) (square_size s)) area_height)))

(assert (forall ((s1 Square) (s2 Square))
                (not (and (not (= s1 s2))

                          (<= (pos_x s1) (pos_x s2))
                          (<= (pos_y s1) (pos_y s2))

                          (< (pos_x s2) (+ (pos_x s1) (square_size s1)))
                          (< (pos_x s1) (+ (pos_x s2) (square_size s2)))
                          (< (pos_y s2) (+ (pos_y s1) (square_size s1)))
                          (< (pos_y s1) (+ (pos_y s2) (square_size s2)))

                          (<= (+ (pos_x s2) (square_size s2)) (+ (pos_x s1) (square_size s1)))
                          (<= (+ (pos_y s2) (square_size s2)) (+ (pos_y s1) (square_size s1)))
                     )
              )))

(x-interpret-const area_width 5)
(x-interpret-const area_height 5)

(x-interpret-fun square_size (x-mapping ((q1) 1) ((q2) 2)))


(x-ground :debug :sql)
(x-debug solver generators)
------- RESULTS ------------------
(declare-datatype Square ((q1) (q2)))
(declare-fun pos_x (Square) Int)
(declare-fun pos_y (Square) Int)
(declare-fun square_size (Square) Int)
(declare-fun area_width () Int)
(declare-fun area_height () Int)
; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_square_1.G AS s,
;              apply("<=", 0, apply("pos_x", _xmt_sort_square_1.G)) AS G
;         FROM _xmt_sort_square AS _xmt_sort_square_1)(assert (<= 0 (pos_x q1)))
(assert (<= 0 (pos_x q2)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_sort_square_1.G AS s,
;              apply("<=", 0, apply("pos_y", _xmt_sort_square_1.G)) AS G
;         FROM _xmt_sort_square AS _xmt_sort_square_1)(assert (<= 0 (pos_y q1)))
(assert (<= 0 (pos_y q2)))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_square_size_G_8.a_1 AS s,
;              apply("<=", apply("+", apply("pos_x", _xmt_interp_square_size_G_8.a_1), _xmt_interp_square_size_G_8.G), _xmt_interp_area_width_G_10.G) AS G
;         FROM _xmt_interp_square_size_G AS _xmt_interp_square_size_G_8
;         JOIN _xmt_interp_area_width_G AS _xmt_interp_area_width_G_10)(assert (<= (+ (pos_x q1) 1) 5))
(assert (<= (+ (pos_x q2) 2) 5))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_square_size_G_8.a_1 AS s,
;              apply("<=", apply("+", apply("pos_y", _xmt_interp_square_size_G_8.a_1), _xmt_interp_square_size_G_8.G), _xmt_interp_area_height_G_14.G) AS G
;         FROM _xmt_interp_square_size_G AS _xmt_interp_square_size_G_8
;         JOIN _xmt_interp_area_height_G AS _xmt_interp_area_height_G_14)(assert (<= (+ (pos_y q1) 1) 5))
(assert (<= (+ (pos_y q2) 2) 5))

; ==== Query =============================
;-- Agg (0)
;SELECT G as G
; FROM (-- Join(7)
;       SELECT _xmt_interp_square_size_G_30.a_1 AS s1,
;              _xmt_interp_square_size_G_34.a_1 AS s2,
;              or_(not_(not_(eq_(_xmt_interp_square_size_G_30.a_1, _xmt_interp_square_size_G_34.a_1))), apply("not", apply("<=", apply("pos_x", _xmt_interp_square_size_G_30.a_1), apply("pos_x", _xmt_interp_square_size_G_34.a_1))), apply("not", apply("<=", apply("pos_y", _xmt_interp_square_size_G_30.a_1), apply("pos_y", _xmt_interp_square_size_G_34.a_1))), apply("not", apply("<", apply("pos_x", _xmt_interp_square_size_G_34.a_1), apply("+", apply("pos_x", _xmt_interp_square_size_G_30.a_1), _xmt_interp_square_size_G_30.G))), apply("not", apply("<", apply("pos_x", _xmt_interp_square_size_G_30.a_1), apply("+", apply("pos_x", _xmt_interp_square_size_G_34.a_1), _xmt_interp_square_size_G_34.G))), apply("not", apply("<", apply("pos_y", _xmt_interp_square_size_G_34.a_1), apply("+", apply("pos_y", _xmt_interp_square_size_G_30.a_1), _xmt_interp_square_size_G_30.G))), apply("not", apply("<", apply("pos_y", _xmt_interp_square_size_G_30.a_1), apply("+", apply("pos_y", _xmt_interp_square_size_G_34.a_1), _xmt_interp_square_size_G_34.G))), apply("not", apply("<=", apply("+", apply("pos_x", _xmt_interp_square_size_G_34.a_1), _xmt_interp_square_size_G_34.G), apply("+", apply("pos_x", _xmt_interp_square_size_G_30.a_1), _xmt_interp_square_size_G_30.G))), apply("not", apply("<=", apply("+", apply("pos_y", _xmt_interp_square_size_G_34.a_1), _xmt_interp_square_size_G_34.G), apply("+", apply("pos_y", _xmt_interp_square_size_G_30.a_1), _xmt_interp_square_size_G_30.G)))) AS G
;         FROM _xmt_interp_square_size_G AS _xmt_interp_square_size_G_30
;         JOIN _xmt_interp_square_size_G AS _xmt_interp_square_size_G_34
;        WHERE _xmt_interp_square_size_G_30.a_1 != _xmt_interp_square_size_G_34.a_1)(assert (or (not (<= (pos_x q1) (pos_x q2))) (not (<= (pos_y q1) (pos_y q2))) (not (< (pos_x q2) (+ (pos_x q1) 1))) (not (< (pos_x q1) (+ (pos_x q2) 2))) (not (< (pos_y q2) (+ (pos_y q1) 1))) (not (< (pos_y q1) (+ (pos_y q2) 2))) (not (<= (+ (pos_x q2) 2) (+ (pos_x q1) 1))) (not (<= (+ (pos_y q2) 2) (+ (pos_y q1) 1)))))
(assert (or (not (<= (pos_x q2) (pos_x q1))) (not (<= (pos_y q2) (pos_y q1))) (not (< (pos_x q1) (+ (pos_x q2) 2))) (not (< (pos_x q2) (+ (pos_x q1) 1))) (not (< (pos_y q1) (+ (pos_y q2) 2))) (not (< (pos_y q2) (+ (pos_y q1) 1))) (not (<= (+ (pos_x q1) 1) (+ (pos_x q2) 2))) (not (<= (+ (pos_y q1) 1) (+ (pos_y q2) 2)))))

; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
; ==== Query =============================
;SELECT "true"
Generators:
=== (forall ((s Square)) (<= 0 (pos_x s))) ======================================
TODO: generator
=== (forall ((s Square)) (<= 0 (pos_y s))) ======================================
TODO: generator
=== (forall ((s Square)) (<= (+ (pos_x s) (square_size s)) area_width)) ======================================
TODO: generator
=== (forall ((s Square)) (<= (+ (pos_y s) (square_size s)) area_height)) ======================================
TODO: generator
=== (forall ((s1 Square) (s2 Square)) (or (not (not (= s1 s2))) (not (<= (pos_x s1) (pos_x s2))) (not (<= (pos_y s1) (pos_y s2))) (not (< (pos_x s2) (+ (pos_x s1) (square_size s1)))) (not (< (pos_x s1) (+ (pos_x s2) (square_size s2)))) (not (< (pos_y s2) (+ (pos_y s1) (square_size s1)))) (not (< (pos_y s1) (+ (pos_y s2) (square_size s2)))) (not (<= (+ (pos_x s2) (square_size s2)) (+ (pos_x s1) (square_size s1)))) (not (<= (+ (pos_y s2) (square_size s2)) (+ (pos_y s1) (square_size s1)))))) ======================================
TODO: generator
===========================================
