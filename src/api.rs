// Copyright Pierre Carbonnelle, 2025.

//! This module defines the abstract syntax tree (AST) of XMT-Lib.
//!
//! They are listed in the order given in Appendix B of the SMT-Lib standard.

// It also contains macros to create XMT-Lib commands programmatically.

use crate::error::Offset;

// //////////////////////////// Other tokens ////////////////////////////

// //////////////////////////// S-expressions ///////////////////////////

// //////////////////////////// Identifiers  ////////////////////////////
// //////////////////////////// Sorts        ////////////////////////////
// //////////////////////////// Attributes   ////////////////////////////
// //////////////////////////// Terms        ////////////////////////////
// //////////////////////////// Theories     ////////////////////////////
// //////////////////////////// Logics       ////////////////////////////
// //////////////////////////// Info flags   ////////////////////////////
// //////////////////////////// Command Options /////////////////////////
// //////////////////////////// Commands     ////////////////////////////

#[derive(PartialEq, Eq, Debug)]
pub enum Command {
    CheckSat,
    Verbatim(String),
}


#[macro_export]
macro_rules! CheckSat {
    ( ) => { Command::CheckSat }
}


// //////////////////////////// Command responses ///////////////////////


#[test]
fn parse_test() {
    use crate::api::Command::*;
    use crate::grammar::parse;
    assert_eq!(parse("(check-sat) "),
               Ok(vec![CheckSat]));
}
